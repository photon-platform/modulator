digraph {
	rankdir=TB
	<Module: @6-181> [label=Module]
	"PythonNode(simple_stmt, [<String: \"\"\"
Requests HTTP Library
~~~~~~~~~~~~~~~~~~~~~

Requests is an HTTP library, written in Python, for human beings.
Basic GET usage:

   >>> import requests
   >>> r = requests.get('https://www.python.org')
   >>> r.status_code
   200
   >>> b'Python is a programming language' in r.content
   True

... or POST:

   >>> payload = dict(key1='value1', key2='value2')
   >>> r = requests.post('https://httpbin.org/post', data=payload)
   >>> print(r.text)
   {
     ...
     \"form\": {
       \"key1\": \"value1\",
       \"key2\": \"value2\"
     },
     ...
   }

The other HTTP methods are supported - see `requests.api`. Full documentation
is at <https://requests.readthedocs.io>.

:copyright: (c) 2017 by Kenneth Reitz.
:license: Apache 2.0, see LICENSE for more details.
\"\"\">, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<String":" \"\"\"
Requests HTTP Library
~~~~~~~~~~~~~~~~~~~~~

Requests is an HTTP library, written in Python, for human beings.
Basic GET usage":

   >>> import requests
   >>> r = requests.get('https://www.python.org')
   >>> r.status_code
   200
   >>> b'Python is a programming language' in r.content
   True

... or POST:

   >>> payload = dict(key1='value1', key2='value2')
   >>> r = requests.post('https://httpbin.org/post', data=payload)
   >>> print(r.text)
   {
     ...
     "form": {
       "key1": "value1",
       "key2": "value2"
     },
     ...
   }

The other HTTP methods are supported - see `requests.api`. Full documentation
is at <https://requests.readthedocs.io>.

:copyright: (c) 2017 by Kenneth Reitz.
:license: Apache 2.0, see LICENSE for more details.
""">, <Newline: '\n'>])
	<String: """
Requests HTTP Library
~~~~~~~~~~~~~~~~~~~~~

Requests is an HTTP library, written in Python, for human beings.
Basic GET usage:

   >>> import requests
   >>> r = requests.get('https://www.python.org')
   >>> r.status_code
   200
   >>> b'Python is a programming language' in r.content
   True

... or POST:

   >>> payload = dict(key1='value1', key2='value2')
   >>> r = requests.post('https://httpbin.org/post', data=payload)
   >>> print(r.text)
   {
     ...
     "form": {
       "key1": "value1",
       "key2": "value2"
     },
     ...
   }

The other HTTP methods are supported - see `requests.api`. Full documentation
is at <https://requests.readthedocs.io>.

:copyright: (c) 2017 by Kenneth Reitz.
:license: Apache 2.0, see LICENSE for more details.
"""> [label=String]
	"PythonNode(simple_stmt, [<String":" \"\"\"
Requests HTTP Library
~~~~~~~~~~~~~~~~~~~~~

Requests is an HTTP library, written in Python, for human beings.
Basic GET usage":

   >>> import requests
   >>> r = requests.get('https://www.python.org')
   >>> r.status_code
   200
   >>> b'Python is a programming language' in r.content
   True

... or POST:

   >>> payload = dict(key1='value1', key2='value2')
   >>> r = requests.post('https://httpbin.org/post', data=payload)
   >>> print(r.text)
   {
     ...
     "form": {
       "key1": "value1",
       "key2": "value2"
     },
     ...
   }

The other HTTP methods are supported - see `requests.api`. Full documentation
is at <https://requests.readthedocs.io>.

:copyright: (c) 2017 by Kenneth Reitz.
:license: Apache 2.0, see LICENSE for more details.
""">, <Newline: '\n'>]) -> "<String":" \"\"\"
Requests HTTP Library
~~~~~~~~~~~~~~~~~~~~~

Requests is an HTTP library, written in Python, for human beings.
Basic GET usage":

   >>> import requests
   >>> r = requests.get('https://www.python.org')
   >>> r.status_code
   200
   >>> b'Python is a programming language' in r.content
   True

... or POST:

   >>> payload = dict(key1='value1', key2='value2')
   >>> r = requests.post('https://httpbin.org/post', data=payload)
   >>> print(r.text)
   {
     ...
     "form": {
       "key1": "value1",
       "key2": "value2"
     },
     ...
   }

The other HTTP methods are supported - see `requests.api`. Full documentation
is at <https://requests.readthedocs.io>.

:copyright: (c) 2017 by Kenneth Reitz.
:license: Apache 2.0, see LICENSE for more details.
""">
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<String":" \"\"\"
Requests HTTP Library
~~~~~~~~~~~~~~~~~~~~~

Requests is an HTTP library, written in Python, for human beings.
Basic GET usage":

   >>> import requests
   >>> r = requests.get('https://www.python.org')
   >>> r.status_code
   200
   >>> b'Python is a programming language' in r.content
   True

... or POST:

   >>> payload = dict(key1='value1', key2='value2')
   >>> r = requests.post('https://httpbin.org/post', data=payload)
   >>> print(r.text)
   {
     ...
     "form": {
       "key1": "value1",
       "key2": "value2"
     },
     ...
   }

The other HTTP methods are supported - see `requests.api`. Full documentation
is at <https://requests.readthedocs.io>.

:copyright: (c) 2017 by Kenneth Reitz.
:license: Apache 2.0, see LICENSE for more details.
""">, <Newline: '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportName: import warnings@41,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportName":" import warnings@41,0>, <Newline": '\n'>])
	<ImportName: import warnings@41,0> [label=ImportName]
	"PythonNode(simple_stmt, [<ImportName":" import warnings@41,0>, <Newline": '\n'>]) -> "<ImportName":" import warnings@41,0>"
	<Keyword: import> [label=Keyword]
	"<ImportName":" import warnings@41,0>" -> "<Keyword":" import>"
	<Name: warnings@41,7> [label=Name]
	"<ImportName":" import warnings@41,0>" -> "<Name":" warnings@41,7>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportName":" import warnings@41,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportName: import urllib3@43,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportName":" import urllib3@43,0>, <Newline": '\n'>])
	<ImportName: import urllib3@43,0> [label=ImportName]
	"PythonNode(simple_stmt, [<ImportName":" import urllib3@43,0>, <Newline": '\n'>]) -> "<ImportName":" import urllib3@43,0>"
	<Keyword: import> [label=Keyword]
	"<ImportName":" import urllib3@43,0>" -> "<Keyword":" import>"
	<Name: urllib3@43,7> [label=Name]
	"<ImportName":" import urllib3@43,0>" -> "<Name":" urllib3@43,7>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportName":" import urllib3@43,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from .exceptions import RequestsDependencyWarning@45,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" from .exceptions import RequestsDependencyWarning@45,0>, <Newline": '\n'>])
	<ImportFrom: from .exceptions import RequestsDependencyWarning@45,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from .exceptions import RequestsDependencyWarning@45,0>, <Newline": '\n'>]) -> "<ImportFrom":" from .exceptions import RequestsDependencyWarning@45,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from .exceptions import RequestsDependencyWarning@45,0>" -> "<Keyword":" from>"
	<Operator: .> [label=Operator]
	"<ImportFrom":" from .exceptions import RequestsDependencyWarning@45,0>" -> "<Operator":" .>"
	<Name: exceptions@45,6> [label=Name]
	"<ImportFrom":" from .exceptions import RequestsDependencyWarning@45,0>" -> "<Name":" exceptions@45,6>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from .exceptions import RequestsDependencyWarning@45,0>" -> "<Keyword":" import>"
	<Name: RequestsDependencyWarning@45,24> [label=Name]
	"<ImportFrom":" from .exceptions import RequestsDependencyWarning@45,0>" -> "<Name":" RequestsDependencyWarning@45,24>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from .exceptions import RequestsDependencyWarning@45,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<TryStmt: try:     from charset_normalizer import __version__ as charset_normalizer_version except ImportError:     charset_normalizer_version = None@47,0> [label=TryStmt]
	"<Module":" @6-181>" -> "<TryStmt":" try":     from charset_normalizer import __version__ as charset_normalizer_version except ImportError:     charset_normalizer_version = None@47,0>
	<Keyword: try> [label=Keyword]
	"<TryStmt":" try":     from charset_normalizer import __version__ as charset_normalizer_version except ImportError:     charset_normalizer_version = None@47,0> -> "<Keyword":" try>"
	<Operator: :> [label=Operator]
	"<TryStmt":" try":     from charset_normalizer import __version__ as charset_normalizer_version except ImportError:     charset_normalizer_version = None@47,0> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ImportFrom: from charset_normalizer import __version__ as charset_normalizer_version@48,4>, <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" try":     from charset_normalizer import __version__ as charset_normalizer_version except ImportError:     charset_normalizer_version = None@47,0> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from charset_normalizer import __version__ as charset_normalizer_version@48,4>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from charset_normalizer import __version__ as charset_normalizer_version@48,4>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from charset_normalizer import __version__ as charset_normalizer_version@48,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from charset_normalizer import __version__ as charset_normalizer_version@48,4>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ImportFrom":" from charset_normalizer import __version__ as charset_normalizer_version@48,4>, <Newline": '\n'>])
	<ImportFrom: from charset_normalizer import __version__ as charset_normalizer_version@48,4> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from charset_normalizer import __version__ as charset_normalizer_version@48,4>, <Newline": '\n'>]) -> "<ImportFrom":" from charset_normalizer import __version__ as charset_normalizer_version@48,4>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from charset_normalizer import __version__ as charset_normalizer_version@48,4>" -> "<Keyword":" from>"
	<Name: charset_normalizer@48,9> [label=Name]
	"<ImportFrom":" from charset_normalizer import __version__ as charset_normalizer_version@48,4>" -> "<Name":" charset_normalizer@48,9>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from charset_normalizer import __version__ as charset_normalizer_version@48,4>" -> "<Keyword":" import>"
	"PythonNode(import_as_name, [<Name: __version__@48,35>, <Keyword: as>, <Name: charset_normalizer_version@48,50>])" [label=PythonNode]
	"<ImportFrom":" from charset_normalizer import __version__ as charset_normalizer_version@48,4>" -> "PythonNode(import_as_name, [<Name":" __version__@48,35>, <Keyword": as>, <Name: charset_normalizer_version@48,50>])
	<Name: __version__@48,35> [label=Name]
	"PythonNode(import_as_name, [<Name":" __version__@48,35>, <Keyword": as>, <Name: charset_normalizer_version@48,50>]) -> "<Name":" __version__@48,35>"
	<Keyword: as> [label=Keyword]
	"PythonNode(import_as_name, [<Name":" __version__@48,35>, <Keyword": as>, <Name: charset_normalizer_version@48,50>]) -> "<Keyword":" as>"
	<Name: charset_normalizer_version@48,50> [label=Name]
	"PythonNode(import_as_name, [<Name":" __version__@48,35>, <Keyword": as>, <Name: charset_normalizer_version@48,50>]) -> "<Name":" charset_normalizer_version@48,50>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from charset_normalizer import __version__ as charset_normalizer_version@48,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(except_clause, [<Keyword: except>, <Name: ImportError@49,7>])" [label=PythonNode]
	"<TryStmt":" try":     from charset_normalizer import __version__ as charset_normalizer_version except ImportError:     charset_normalizer_version = None@47,0> -> "PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@49,7>])
	<Keyword: except> [label=Keyword]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@49,7>]) -> "<Keyword":" except>"
	<Name: ImportError@49,7> [label=Name]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@49,7>]) -> "<Name":" ImportError@49,7>"
	<Operator: :> [label=Operator]
	"<TryStmt":" try":     from charset_normalizer import __version__ as charset_normalizer_version except ImportError:     charset_normalizer_version = None@47,0> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ExprStmt: charset_normalizer_version = None@50,4>, <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" try":     from charset_normalizer import __version__ as charset_normalizer_version except ImportError:     charset_normalizer_version = None@47,0> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": charset_normalizer_version = None@50,4>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": charset_normalizer_version = None@50,4>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: charset_normalizer_version = None@50,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": charset_normalizer_version = None@50,4>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ExprStmt":" charset_normalizer_version = None@50,4>, <Newline": '\n'>])
	<ExprStmt: charset_normalizer_version = None@50,4> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" charset_normalizer_version = None@50,4>, <Newline": '\n'>]) -> "<ExprStmt":" charset_normalizer_version = None@50,4>"
	<Name: charset_normalizer_version@50,4> [label=Name]
	"<ExprStmt":" charset_normalizer_version = None@50,4>" -> "<Name":" charset_normalizer_version@50,4>"
	<Operator: => [label=Operator]
	"<ExprStmt":" charset_normalizer_version = None@50,4>" -> "<Operator":" =>"
	<Keyword: None> [label=Keyword]
	"<ExprStmt":" charset_normalizer_version = None@50,4>" -> "<Keyword":" None>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" charset_normalizer_version = None@50,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<TryStmt: try:     from chardet import __version__ as chardet_version except ImportError:     chardet_version = None@52,0> [label=TryStmt]
	"<Module":" @6-181>" -> "<TryStmt":" try":     from chardet import __version__ as chardet_version except ImportError:     chardet_version = None@52,0>
	<Keyword: try> [label=Keyword]
	"<TryStmt":" try":     from chardet import __version__ as chardet_version except ImportError:     chardet_version = None@52,0> -> "<Keyword":" try>"
	<Operator: :> [label=Operator]
	"<TryStmt":" try":     from chardet import __version__ as chardet_version except ImportError:     chardet_version = None@52,0> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ImportFrom: from chardet import __version__ as chardet_version@53,4>, <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" try":     from chardet import __version__ as chardet_version except ImportError:     chardet_version = None@52,0> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from chardet import __version__ as chardet_version@53,4>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from chardet import __version__ as chardet_version@53,4>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from chardet import __version__ as chardet_version@53,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from chardet import __version__ as chardet_version@53,4>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ImportFrom":" from chardet import __version__ as chardet_version@53,4>, <Newline": '\n'>])
	<ImportFrom: from chardet import __version__ as chardet_version@53,4> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from chardet import __version__ as chardet_version@53,4>, <Newline": '\n'>]) -> "<ImportFrom":" from chardet import __version__ as chardet_version@53,4>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from chardet import __version__ as chardet_version@53,4>" -> "<Keyword":" from>"
	<Name: chardet@53,9> [label=Name]
	"<ImportFrom":" from chardet import __version__ as chardet_version@53,4>" -> "<Name":" chardet@53,9>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from chardet import __version__ as chardet_version@53,4>" -> "<Keyword":" import>"
	"PythonNode(import_as_name, [<Name: __version__@53,24>, <Keyword: as>, <Name: chardet_version@53,39>])" [label=PythonNode]
	"<ImportFrom":" from chardet import __version__ as chardet_version@53,4>" -> "PythonNode(import_as_name, [<Name":" __version__@53,24>, <Keyword": as>, <Name: chardet_version@53,39>])
	<Name: __version__@53,24> [label=Name]
	"PythonNode(import_as_name, [<Name":" __version__@53,24>, <Keyword": as>, <Name: chardet_version@53,39>]) -> "<Name":" __version__@53,24>"
	<Keyword: as> [label=Keyword]
	"PythonNode(import_as_name, [<Name":" __version__@53,24>, <Keyword": as>, <Name: chardet_version@53,39>]) -> "<Keyword":" as>"
	<Name: chardet_version@53,39> [label=Name]
	"PythonNode(import_as_name, [<Name":" __version__@53,24>, <Keyword": as>, <Name: chardet_version@53,39>]) -> "<Name":" chardet_version@53,39>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from chardet import __version__ as chardet_version@53,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(except_clause, [<Keyword: except>, <Name: ImportError@54,7>])" [label=PythonNode]
	"<TryStmt":" try":     from chardet import __version__ as chardet_version except ImportError:     chardet_version = None@52,0> -> "PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@54,7>])
	<Keyword: except> [label=Keyword]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@54,7>]) -> "<Keyword":" except>"
	<Name: ImportError@54,7> [label=Name]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@54,7>]) -> "<Name":" ImportError@54,7>"
	<Operator: :> [label=Operator]
	"<TryStmt":" try":     from chardet import __version__ as chardet_version except ImportError:     chardet_version = None@52,0> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ExprStmt: chardet_version = None@55,4>, <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" try":     from chardet import __version__ as chardet_version except ImportError:     chardet_version = None@52,0> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": chardet_version = None@55,4>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": chardet_version = None@55,4>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: chardet_version = None@55,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": chardet_version = None@55,4>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ExprStmt":" chardet_version = None@55,4>, <Newline": '\n'>])
	<ExprStmt: chardet_version = None@55,4> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" chardet_version = None@55,4>, <Newline": '\n'>]) -> "<ExprStmt":" chardet_version = None@55,4>"
	<Name: chardet_version@55,4> [label=Name]
	"<ExprStmt":" chardet_version = None@55,4>" -> "<Name":" chardet_version@55,4>"
	<Operator: => [label=Operator]
	"<ExprStmt":" chardet_version = None@55,4>" -> "<Operator":" =>"
	<Keyword: None> [label=Keyword]
	"<ExprStmt":" chardet_version = None@55,4>" -> "<Keyword":" None>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" chardet_version = None@55,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<Function: check_compatibility@58-87> [label=Function]
	"<Module":" @6-181>" -> "<Function":" check_compatibility@58-87>"
	<Keyword: def> [label=Keyword]
	"<Function":" check_compatibility@58-87>" -> "<Keyword":" def>"
	<Name: check_compatibility@58,4> [label=Name]
	"<Function":" check_compatibility@58-87>" -> "<Name":" check_compatibility@58,4>"
	"PythonNode(parameters, [<Operator: (>, <Param: <Name: urllib3_version@58,24>>, <Param: <Name: chardet_version@58,41>>, <Param: <Name: charset_normalizer_version@58,58>>, <Operator: )>])" [label=PythonNode]
	"<Function":" check_compatibility@58-87>" -> "PythonNode(parameters, [<Operator":" (>, <Param": <Name: urllib3_version@58,24>>, <Param: <Name: chardet_version@58,41>>, <Param: <Name: charset_normalizer_version@58,58>>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(parameters, [<Operator":" (>, <Param": <Name: urllib3_version@58,24>>, <Param: <Name: chardet_version@58,41>>, <Param: <Name: charset_normalizer_version@58,58>>, <Operator: )>]) -> "<Operator":" (>"
	<Param: <Name: urllib3_version@58,24>> [label=Param]
	"PythonNode(parameters, [<Operator":" (>, <Param": <Name: urllib3_version@58,24>>, <Param: <Name: chardet_version@58,41>>, <Param: <Name: charset_normalizer_version@58,58>>, <Operator: )>]) -> "<Param":" <Name": urllib3_version@58,24>>
	<Name: urllib3_version@58,24> [label=Name]
	"<Param":" <Name": urllib3_version@58,24>> -> "<Name":" urllib3_version@58,24>"
	<Operator: ,> [label=Operator]
	"<Param":" <Name": urllib3_version@58,24>> -> "<Operator":" ,>"
	<Param: <Name: chardet_version@58,41>> [label=Param]
	"PythonNode(parameters, [<Operator":" (>, <Param": <Name: urllib3_version@58,24>>, <Param: <Name: chardet_version@58,41>>, <Param: <Name: charset_normalizer_version@58,58>>, <Operator: )>]) -> "<Param":" <Name": chardet_version@58,41>>
	<Name: chardet_version@58,41> [label=Name]
	"<Param":" <Name": chardet_version@58,41>> -> "<Name":" chardet_version@58,41>"
	<Operator: ,> [label=Operator]
	"<Param":" <Name": chardet_version@58,41>> -> "<Operator":" ,>"
	<Param: <Name: charset_normalizer_version@58,58>> [label=Param]
	"PythonNode(parameters, [<Operator":" (>, <Param": <Name: urllib3_version@58,24>>, <Param: <Name: chardet_version@58,41>>, <Param: <Name: charset_normalizer_version@58,58>>, <Operator: )>]) -> "<Param":" <Name": charset_normalizer_version@58,58>>
	<Name: charset_normalizer_version@58,58> [label=Name]
	"<Param":" <Name": charset_normalizer_version@58,58>> -> "<Name":" charset_normalizer_version@58,58>"
	<Operator: )> [label=Operator]
	"PythonNode(parameters, [<Operator":" (>, <Param": <Name: urllib3_version@58,24>>, <Param: <Name: chardet_version@58,41>>, <Param: <Name: charset_normalizer_version@58,58>>, <Operator: )>]) -> "<Operator":" )>"
	<Operator: :> [label=Operator]
	"<Function":" check_compatibility@58-87>" -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ExprStmt: urllib3_version = urllib3_version.split(\".\")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != [\"dev\"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append(\"0\")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(\".\")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(\".\")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception(\"You need either charset_normalizer or chardet installed\")@75,4>])" [label=PythonNode]
	"<Function":" check_compatibility@58-87>" -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: urllib3_version = urllib3_version.split(\".\")@59,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "PythonNode(simple_stmt, [<ExprStmt":" urllib3_version = urllib3_version.split(\".\")@59,4>, <Newline": '\n'>])
	<ExprStmt: urllib3_version = urllib3_version.split(".")@59,4> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" urllib3_version = urllib3_version.split(\".\")@59,4>, <Newline": '\n'>]) -> "<ExprStmt":" urllib3_version = urllib3_version.split(\".\")@59,4>"
	<Name: urllib3_version@59,4> [label=Name]
	"<ExprStmt":" urllib3_version = urllib3_version.split(\".\")@59,4>" -> "<Name":" urllib3_version@59,4>"
	<Operator: => [label=Operator]
	"<ExprStmt":" urllib3_version = urllib3_version.split(\".\")@59,4>" -> "<Operator":" =>"
	"PythonNode(atom_expr, [<Name: urllib3_version@59,22>, PythonNode(trailer, [<Operator: .>, <Name: split@59,38>]), PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])])" [label=PythonNode]
	"<ExprStmt":" urllib3_version = urllib3_version.split(\".\")@59,4>" -> "PythonNode(atom_expr, [<Name":" urllib3_version@59,22>, PythonNode(trailer, [<Operator": .>, <Name: split@59,38>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])
	<Name: urllib3_version@59,22> [label=Name]
	"PythonNode(atom_expr, [<Name":" urllib3_version@59,22>, PythonNode(trailer, [<Operator": .>, <Name: split@59,38>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])]) -> "<Name":" urllib3_version@59,22>"
	"PythonNode(trailer, [<Operator: .>, <Name: split@59,38>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" urllib3_version@59,22>, PythonNode(trailer, [<Operator": .>, <Name: split@59,38>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": split@59,38>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": split@59,38>]) -> "<Operator":" .>"
	<Name: split@59,38> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": split@59,38>]) -> "<Name":" split@59,38>"
	"PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" urllib3_version@59,22>, PythonNode(trailer, [<Operator": .>, <Name: split@59,38>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<Operator":" (>"
	<String: "."> [label=String]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<String":" \".\">"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" urllib3_version = urllib3_version.split(\".\")@59,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != [\"dev\"]@60,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "PythonNode(simple_stmt, [<AssertStmt":" assert urllib3_version != [\"dev\"]@60,4>, <Newline": '\n'>])
	<AssertStmt: assert urllib3_version != ["dev"]@60,4> [label=AssertStmt]
	"PythonNode(simple_stmt, [<AssertStmt":" assert urllib3_version != [\"dev\"]@60,4>, <Newline": '\n'>]) -> "<AssertStmt":" assert urllib3_version != [\"dev\"]@60,4>"
	<Keyword: assert> [label=Keyword]
	"<AssertStmt":" assert urllib3_version != [\"dev\"]@60,4>" -> "<Keyword":" assert>"
	"PythonNode(comparison, [<Name: urllib3_version@60,11>, <Operator: !=>, PythonNode(atom, [<Operator: [>, <String: \"dev\">, <Operator: ]>])])" [label=PythonNode]
	"<AssertStmt":" assert urllib3_version != [\"dev\"]@60,4>" -> "PythonNode(comparison, [<Name":" urllib3_version@60,11>, <Operator": !=>, PythonNode(atom, [<Operator: [>, <String: "dev">, <Operator: ]>])])
	<Name: urllib3_version@60,11> [label=Name]
	"PythonNode(comparison, [<Name":" urllib3_version@60,11>, <Operator": !=>, PythonNode(atom, [<Operator: [>, <String: "dev">, <Operator: ]>])]) -> "<Name":" urllib3_version@60,11>"
	<Operator: !=> [label=Operator]
	"PythonNode(comparison, [<Name":" urllib3_version@60,11>, <Operator": !=>, PythonNode(atom, [<Operator: [>, <String: "dev">, <Operator: ]>])]) -> "<Operator":" !=>"
	"PythonNode(atom, [<Operator: [>, <String: \"dev\">, <Operator: ]>])" [label=PythonNode]
	"PythonNode(comparison, [<Name":" urllib3_version@60,11>, <Operator": !=>, PythonNode(atom, [<Operator: [>, <String: "dev">, <Operator: ]>])]) -> "PythonNode(atom, [<Operator":" [>, <String": "dev">, <Operator: ]>])
	<Operator: [> [label=Operator]
	"PythonNode(atom, [<Operator":" [>, <String": "dev">, <Operator: ]>]) -> "<Operator":" [>"
	<String: "dev"> [label=String]
	"PythonNode(atom, [<Operator":" [>, <String": "dev">, <Operator: ]>]) -> "<String":" \"dev\">"
	<Operator: ]> [label=Operator]
	"PythonNode(atom, [<Operator":" [>, <String": "dev">, <Operator: ]>]) -> "<Operator":" ]>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<AssertStmt":" assert urllib3_version != [\"dev\"]@60,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4> [label=IfStmt]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "<IfStmt":" # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2":         urllib3_version.append("0")@63,4>
	<Keyword: if> [label=Keyword]
	"<IfStmt":" # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2":         urllib3_version.append("0")@63,4> -> "<Keyword":" if>"
	"PythonNode(comparison, [PythonNode(atom_expr, [<Name: len@63,7>, PythonNode(trailer, [<Operator: (>, <Name: urllib3_version@63,11>, <Operator: )>])]), <Operator: ==>, <Number: 2>])" [label=PythonNode]
	"<IfStmt":" # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2":         urllib3_version.append("0")@63,4> -> "PythonNode(comparison, [PythonNode(atom_expr, [<Name":" len@63,7>, PythonNode(trailer, [<Operator": (>, <Name: urllib3_version@63,11>, <Operator: )>])]), <Operator: ==>, <Number: 2>])
	"PythonNode(atom_expr, [<Name: len@63,7>, PythonNode(trailer, [<Operator: (>, <Name: urllib3_version@63,11>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(comparison, [PythonNode(atom_expr, [<Name":" len@63,7>, PythonNode(trailer, [<Operator": (>, <Name: urllib3_version@63,11>, <Operator: )>])]), <Operator: ==>, <Number: 2>]) -> "PythonNode(atom_expr, [<Name":" len@63,7>, PythonNode(trailer, [<Operator": (>, <Name: urllib3_version@63,11>, <Operator: )>])])
	<Name: len@63,7> [label=Name]
	"PythonNode(atom_expr, [<Name":" len@63,7>, PythonNode(trailer, [<Operator": (>, <Name: urllib3_version@63,11>, <Operator: )>])]) -> "<Name":" len@63,7>"
	"PythonNode(trailer, [<Operator: (>, <Name: urllib3_version@63,11>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" len@63,7>, PythonNode(trailer, [<Operator": (>, <Name: urllib3_version@63,11>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": urllib3_version@63,11>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": urllib3_version@63,11>, <Operator: )>]) -> "<Operator":" (>"
	<Name: urllib3_version@63,11> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": urllib3_version@63,11>, <Operator: )>]) -> "<Name":" urllib3_version@63,11>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": urllib3_version@63,11>, <Operator: )>]) -> "<Operator":" )>"
	<Operator: ==> [label=Operator]
	"PythonNode(comparison, [PythonNode(atom_expr, [<Name":" len@63,7>, PythonNode(trailer, [<Operator": (>, <Name: urllib3_version@63,11>, <Operator: )>])]), <Operator: ==>, <Number: 2>]) -> "<Operator":" ==>"
	<Number: 2> [label=Number]
	"PythonNode(comparison, [PythonNode(atom_expr, [<Name":" len@63,7>, PythonNode(trailer, [<Operator": (>, <Name: urllib3_version@63,11>, <Operator: )>])]), <Operator: ==>, <Number: 2>]) -> "<Number":" 2>"
	<Operator: :> [label=Operator]
	"<IfStmt":" # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2":         urllib3_version.append("0")@63,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: urllib3_version@64,8>, PythonNode(trailer, [<Operator: .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: \"0\">, <Operator: )>])]), <Newline: '\n'>])])" [label=PythonNode]
	"<IfStmt":" # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2":         urllib3_version.append("0")@63,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name": urllib3_version@64,8>, PythonNode(trailer, [<Operator: .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])]), <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name": urllib3_version@64,8>, PythonNode(trailer, [<Operator: .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])]), <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: urllib3_version@64,8>, PythonNode(trailer, [<Operator: .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: \"0\">, <Operator: )>])]), <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name": urllib3_version@64,8>, PythonNode(trailer, [<Operator: .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])]), <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" urllib3_version@64,8>, PythonNode(trailer, [<Operator": .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])]), <Newline: '\n'>])
	"PythonNode(atom_expr, [<Name: urllib3_version@64,8>, PythonNode(trailer, [<Operator: .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: \"0\">, <Operator: )>])])" [label=PythonNode]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" urllib3_version@64,8>, PythonNode(trailer, [<Operator": .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])]), <Newline: '\n'>]) -> "PythonNode(atom_expr, [<Name":" urllib3_version@64,8>, PythonNode(trailer, [<Operator": .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])])
	<Name: urllib3_version@64,8> [label=Name]
	"PythonNode(atom_expr, [<Name":" urllib3_version@64,8>, PythonNode(trailer, [<Operator": .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])]) -> "<Name":" urllib3_version@64,8>"
	"PythonNode(trailer, [<Operator: .>, <Name: append@64,24>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" urllib3_version@64,8>, PythonNode(trailer, [<Operator": .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": append@64,24>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": append@64,24>]) -> "<Operator":" .>"
	<Name: append@64,24> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": append@64,24>]) -> "<Name":" append@64,24>"
	"PythonNode(trailer, [<Operator: (>, <String: \"0\">, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" urllib3_version@64,8>, PythonNode(trailer, [<Operator": .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <String": "0">, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": "0">, <Operator: )>]) -> "<Operator":" (>"
	<String: "0"> [label=String]
	"PythonNode(trailer, [<Operator":" (>, <String": "0">, <Operator: )>]) -> "<String":" \"0\">"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": "0">, <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" urllib3_version@64,8>, PythonNode(trailer, [<Operator": .>, <Name: append@64,24>]), PythonNode(trailer, [<Operator: (>, <String: "0">, <Operator: )>])]), <Newline: '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "PythonNode(simple_stmt, [<ExprStmt":" # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline": '\n'>])
	<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline": '\n'>]) -> "<ExprStmt":" # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>"
	"PythonNode(testlist_star_expr, [<Name: major@67,4>, <Operator: ,>, <Name: minor@67,11>, <Operator: ,>, <Name: patch@67,18>])" [label=PythonNode]
	"<ExprStmt":" # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>" -> "PythonNode(testlist_star_expr, [<Name":" major@67,4>, <Operator": ,>, <Name: minor@67,11>, <Operator: ,>, <Name: patch@67,18>])
	<Name: major@67,4> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@67,4>, <Operator": ,>, <Name: minor@67,11>, <Operator: ,>, <Name: patch@67,18>]) -> "<Name":" major@67,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@67,4>, <Operator": ,>, <Name: minor@67,11>, <Operator: ,>, <Name: patch@67,18>]) -> "<Operator":" ,>"
	<Name: minor@67,11> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@67,4>, <Operator": ,>, <Name: minor@67,11>, <Operator: ,>, <Name: patch@67,18>]) -> "<Name":" minor@67,11>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@67,4>, <Operator": ,>, <Name: minor@67,11>, <Operator: ,>, <Name: patch@67,18>]) -> "<Operator":" ,>"
	<Name: patch@67,18> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@67,4>, <Operator": ,>, <Name: minor@67,11>, <Operator: ,>, <Name: patch@67,18>]) -> "<Name":" patch@67,18>"
	<Operator: => [label=Operator]
	"<ExprStmt":" # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>" -> "<Operator":" =>"
	<Name: urllib3_version@67,26> [label=Name]
	"<ExprStmt":" # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>" -> "<Name":" urllib3_version@67,26>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline": '\n'>])
	<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline": '\n'>]) -> "<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@68,4>"
	"PythonNode(testlist_star_expr, [<Name: major@68,4>, <Operator: ,>, <Name: minor@68,11>, <Operator: ,>, <Name: patch@68,18>])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@68,4>" -> "PythonNode(testlist_star_expr, [<Name":" major@68,4>, <Operator": ,>, <Name: minor@68,11>, <Operator: ,>, <Name: patch@68,18>])
	<Name: major@68,4> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@68,4>, <Operator": ,>, <Name: minor@68,11>, <Operator: ,>, <Name: patch@68,18>]) -> "<Name":" major@68,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@68,4>, <Operator": ,>, <Name: minor@68,11>, <Operator: ,>, <Name: patch@68,18>]) -> "<Operator":" ,>"
	<Name: minor@68,11> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@68,4>, <Operator": ,>, <Name: minor@68,11>, <Operator: ,>, <Name: patch@68,18>]) -> "<Name":" minor@68,11>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@68,4>, <Operator": ,>, <Name: minor@68,11>, <Operator: ,>, <Name: patch@68,18>]) -> "<Operator":" ,>"
	<Name: patch@68,18> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@68,4>, <Operator": ,>, <Name: minor@68,11>, <Operator: ,>, <Name: patch@68,18>]) -> "<Name":" patch@68,18>"
	<Operator: => [label=Operator]
	"<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@68,4>" -> "<Operator":" =>"
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name: int@68,26>, PythonNode(trailer, [<Operator: (>, <Name: major@68,30>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,38>, PythonNode(trailer, [<Operator: (>, <Name: minor@68,42>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,50>, PythonNode(trailer, [<Operator: (>, <Name: patch@68,54>, <Operator: )>])])])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@68,4>" -> "PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@68,26>, PythonNode(trailer, [<Operator": (>, <Name: major@68,30>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,38>, PythonNode(trailer, [<Operator: (>, <Name: minor@68,42>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,50>, PythonNode(trailer, [<Operator: (>, <Name: patch@68,54>, <Operator: )>])])])
	"PythonNode(atom_expr, [<Name: int@68,26>, PythonNode(trailer, [<Operator: (>, <Name: major@68,30>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@68,26>, PythonNode(trailer, [<Operator": (>, <Name: major@68,30>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,38>, PythonNode(trailer, [<Operator: (>, <Name: minor@68,42>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,50>, PythonNode(trailer, [<Operator: (>, <Name: patch@68,54>, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" int@68,26>, PythonNode(trailer, [<Operator": (>, <Name: major@68,30>, <Operator: )>])])
	<Name: int@68,26> [label=Name]
	"PythonNode(atom_expr, [<Name":" int@68,26>, PythonNode(trailer, [<Operator": (>, <Name: major@68,30>, <Operator: )>])]) -> "<Name":" int@68,26>"
	"PythonNode(trailer, [<Operator: (>, <Name: major@68,30>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" int@68,26>, PythonNode(trailer, [<Operator": (>, <Name: major@68,30>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": major@68,30>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": major@68,30>, <Operator: )>]) -> "<Operator":" (>"
	<Name: major@68,30> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": major@68,30>, <Operator: )>]) -> "<Name":" major@68,30>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": major@68,30>, <Operator: )>]) -> "<Operator":" )>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@68,26>, PythonNode(trailer, [<Operator": (>, <Name: major@68,30>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,38>, PythonNode(trailer, [<Operator: (>, <Name: minor@68,42>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,50>, PythonNode(trailer, [<Operator: (>, <Name: patch@68,54>, <Operator: )>])])]) -> "<Operator":" ,>"
	"PythonNode(atom_expr, [<Name: int@68,38>, PythonNode(trailer, [<Operator: (>, <Name: minor@68,42>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@68,26>, PythonNode(trailer, [<Operator": (>, <Name: major@68,30>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,38>, PythonNode(trailer, [<Operator: (>, <Name: minor@68,42>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,50>, PythonNode(trailer, [<Operator: (>, <Name: patch@68,54>, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" int@68,38>, PythonNode(trailer, [<Operator": (>, <Name: minor@68,42>, <Operator: )>])])
	<Name: int@68,38> [label=Name]
	"PythonNode(atom_expr, [<Name":" int@68,38>, PythonNode(trailer, [<Operator": (>, <Name: minor@68,42>, <Operator: )>])]) -> "<Name":" int@68,38>"
	"PythonNode(trailer, [<Operator: (>, <Name: minor@68,42>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" int@68,38>, PythonNode(trailer, [<Operator": (>, <Name: minor@68,42>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": minor@68,42>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": minor@68,42>, <Operator: )>]) -> "<Operator":" (>"
	<Name: minor@68,42> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": minor@68,42>, <Operator: )>]) -> "<Name":" minor@68,42>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": minor@68,42>, <Operator: )>]) -> "<Operator":" )>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@68,26>, PythonNode(trailer, [<Operator": (>, <Name: major@68,30>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,38>, PythonNode(trailer, [<Operator: (>, <Name: minor@68,42>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,50>, PythonNode(trailer, [<Operator: (>, <Name: patch@68,54>, <Operator: )>])])]) -> "<Operator":" ,>"
	"PythonNode(atom_expr, [<Name: int@68,50>, PythonNode(trailer, [<Operator: (>, <Name: patch@68,54>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@68,26>, PythonNode(trailer, [<Operator": (>, <Name: major@68,30>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,38>, PythonNode(trailer, [<Operator: (>, <Name: minor@68,42>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@68,50>, PythonNode(trailer, [<Operator: (>, <Name: patch@68,54>, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" int@68,50>, PythonNode(trailer, [<Operator": (>, <Name: patch@68,54>, <Operator: )>])])
	<Name: int@68,50> [label=Name]
	"PythonNode(atom_expr, [<Name":" int@68,50>, PythonNode(trailer, [<Operator": (>, <Name: patch@68,54>, <Operator: )>])]) -> "<Name":" int@68,50>"
	"PythonNode(trailer, [<Operator: (>, <Name: patch@68,54>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" int@68,50>, PythonNode(trailer, [<Operator": (>, <Name: patch@68,54>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": patch@68,54>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": patch@68,54>, <Operator: )>]) -> "<Operator":" (>"
	<Name: patch@68,54> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": patch@68,54>, <Operator: )>]) -> "<Name":" patch@68,54>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": patch@68,54>, <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "PythonNode(simple_stmt, [<AssertStmt":" # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline": '\n'>])
	<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4> [label=AssertStmt]
	"PythonNode(simple_stmt, [<AssertStmt":" # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline": '\n'>]) -> "<AssertStmt":" # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>"
	<Keyword: assert> [label=Keyword]
	"<AssertStmt":" # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>" -> "<Keyword":" assert>"
	"PythonNode(comparison, [<Name: major@70,11>, <Operator: ==>, <Number: 1>])" [label=PythonNode]
	"<AssertStmt":" # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>" -> "PythonNode(comparison, [<Name":" major@70,11>, <Operator": ==>, <Number: 1>])
	<Name: major@70,11> [label=Name]
	"PythonNode(comparison, [<Name":" major@70,11>, <Operator": ==>, <Number: 1>]) -> "<Name":" major@70,11>"
	<Operator: ==> [label=Operator]
	"PythonNode(comparison, [<Name":" major@70,11>, <Operator": ==>, <Number: 1>]) -> "<Operator":" ==>"
	<Number: 1> [label=Number]
	"PythonNode(comparison, [<Name":" major@70,11>, <Operator": ==>, <Number: 1>]) -> "<Number":" 1>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<AssertStmt":" # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "PythonNode(simple_stmt, [<AssertStmt":" assert minor >= 21@71,4>, <Newline": '\n'>])
	<AssertStmt: assert minor >= 21@71,4> [label=AssertStmt]
	"PythonNode(simple_stmt, [<AssertStmt":" assert minor >= 21@71,4>, <Newline": '\n'>]) -> "<AssertStmt":" assert minor >= 21@71,4>"
	<Keyword: assert> [label=Keyword]
	"<AssertStmt":" assert minor >= 21@71,4>" -> "<Keyword":" assert>"
	"PythonNode(comparison, [<Name: minor@71,11>, <Operator: >=>, <Number: 21>])" [label=PythonNode]
	"<AssertStmt":" assert minor >= 21@71,4>" -> "PythonNode(comparison, [<Name":" minor@71,11>, <Operator": >=>, <Number: 21>])
	<Name: minor@71,11> [label=Name]
	"PythonNode(comparison, [<Name":" minor@71,11>, <Operator": >=>, <Number: 21>]) -> "<Name":" minor@71,11>"
	<Operator: >=> [label=Operator]
	"PythonNode(comparison, [<Name":" minor@71,11>, <Operator": >=>, <Number: 21>]) -> "<Operator":" >=>"
	<Number: 21> [label=Number]
	"PythonNode(comparison, [<Name":" minor@71,11>, <Operator": >=>, <Number: 21>]) -> "<Number":" 21>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<AssertStmt":" assert minor >= 21@71,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "PythonNode(simple_stmt, [<AssertStmt":" assert minor <= 26@72,4>, <Newline": '\n'>])
	<AssertStmt: assert minor <= 26@72,4> [label=AssertStmt]
	"PythonNode(simple_stmt, [<AssertStmt":" assert minor <= 26@72,4>, <Newline": '\n'>]) -> "<AssertStmt":" assert minor <= 26@72,4>"
	<Keyword: assert> [label=Keyword]
	"<AssertStmt":" assert minor <= 26@72,4>" -> "<Keyword":" assert>"
	"PythonNode(comparison, [<Name: minor@72,11>, <Operator: <=>, <Number: 26>])" [label=PythonNode]
	"<AssertStmt":" assert minor <= 26@72,4>" -> "PythonNode(comparison, [<Name":" minor@72,11>, <Operator": <=>, <Number: 26>])
	<Name: minor@72,11> [label=Name]
	"PythonNode(comparison, [<Name":" minor@72,11>, <Operator": <=>, <Number: 26>]) -> "<Name":" minor@72,11>"
	<Operator: <=> [label=Operator]
	"PythonNode(comparison, [<Name":" minor@72,11>, <Operator": <=>, <Number: 26>]) -> "<Operator":" <=>"
	<Number: 26> [label=Number]
	"PythonNode(comparison, [<Name":" minor@72,11>, <Operator": <=>, <Number: 26>]) -> "<Number":" 26>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<AssertStmt":" assert minor <= 26@72,4>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> [label=IfStmt]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": urllib3_version = urllib3_version.split(".")@59,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert urllib3_version != ["dev"]@60,4>, <Newline: '\n'>]), <IfStmt: # Sometimes, urllib3 only reports its version as 16.1.     if len(urllib3_version) == 2:         urllib3_version.append("0")@63,4>, PythonNode(simple_stmt, [<ExprStmt: # Check urllib3 for compatibility.     major, minor, patch = urllib3_version@67,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@68,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # urllib3 >= 1.21.1, <= 1.26     assert major == 1@70,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor >= 21@71,4>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: assert minor <= 26@72,4>, <Newline: '\n'>]), <IfStmt: # Check charset_normalizer for compatibility.     if chardet_version:         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>]) -> "<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4>
	<Keyword: if> [label=Keyword]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "<Keyword":" if>"
	<Name: chardet_version@75,7> [label=Name]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "<Name":" chardet_version@75,7>"
	<Operator: :> [label=Operator]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = chardet_version.split(\".\")[:3]@76,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline: '\n'>])])" [label=PythonNode]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = chardet_version.split(".")[:3]@76,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = chardet_version.split(".")[:3]@76,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = chardet_version.split(\".\")[:3]@76,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = chardet_version.split(".")[:3]@76,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = chardet_version.split(\".\")[":3]@76,8>, <Newline: '\n'>])
	<ExprStmt: major, minor, patch = chardet_version.split(".")[:3]@76,8> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = chardet_version.split(\".\")[":3]@76,8>, <Newline: '\n'>]) -> "<ExprStmt":" major, minor, patch = chardet_version.split(\".\")[":3]@76,8>
	"PythonNode(testlist_star_expr, [<Name: major@76,8>, <Operator: ,>, <Name: minor@76,15>, <Operator: ,>, <Name: patch@76,22>])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = chardet_version.split(\".\")[":3]@76,8> -> "PythonNode(testlist_star_expr, [<Name":" major@76,8>, <Operator": ,>, <Name: minor@76,15>, <Operator: ,>, <Name: patch@76,22>])
	<Name: major@76,8> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@76,8>, <Operator": ,>, <Name: minor@76,15>, <Operator: ,>, <Name: patch@76,22>]) -> "<Name":" major@76,8>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@76,8>, <Operator": ,>, <Name: minor@76,15>, <Operator: ,>, <Name: patch@76,22>]) -> "<Operator":" ,>"
	<Name: minor@76,15> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@76,8>, <Operator": ,>, <Name: minor@76,15>, <Operator: ,>, <Name: patch@76,22>]) -> "<Name":" minor@76,15>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@76,8>, <Operator": ,>, <Name: minor@76,15>, <Operator: ,>, <Name: patch@76,22>]) -> "<Operator":" ,>"
	<Name: patch@76,22> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@76,8>, <Operator": ,>, <Name: minor@76,15>, <Operator: ,>, <Name: patch@76,22>]) -> "<Name":" patch@76,22>"
	<Operator: => [label=Operator]
	"<ExprStmt":" major, minor, patch = chardet_version.split(\".\")[":3]@76,8> -> "<Operator":" =>"
	"PythonNode(atom_expr, [<Name: chardet_version@76,30>, PythonNode(trailer, [<Operator: .>, <Name: split@76,46>]), PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = chardet_version.split(\".\")[":3]@76,8> -> "PythonNode(atom_expr, [<Name":" chardet_version@76,30>, PythonNode(trailer, [<Operator": .>, <Name: split@76,46>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])])
	<Name: chardet_version@76,30> [label=Name]
	"PythonNode(atom_expr, [<Name":" chardet_version@76,30>, PythonNode(trailer, [<Operator": .>, <Name: split@76,46>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])]) -> "<Name":" chardet_version@76,30>"
	"PythonNode(trailer, [<Operator: .>, <Name: split@76,46>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" chardet_version@76,30>, PythonNode(trailer, [<Operator": .>, <Name: split@76,46>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": split@76,46>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": split@76,46>]) -> "<Operator":" .>"
	<Name: split@76,46> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": split@76,46>]) -> "<Name":" split@76,46>"
	"PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" chardet_version@76,30>, PythonNode(trailer, [<Operator": .>, <Name: split@76,46>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])]) -> "PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<Operator":" (>"
	<String: "."> [label=String]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<String":" \".\">"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<Operator":" )>"
	"PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" chardet_version@76,30>, PythonNode(trailer, [<Operator": .>, <Name: split@76,46>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])]) -> "PythonNode(trailer, [<Operator":" [>, PythonNode(subscript, [<Operator": :>, <Number: 3>]), <Operator: ]>])
	<Operator: [> [label=Operator]
	"PythonNode(trailer, [<Operator":" [>, PythonNode(subscript, [<Operator": :>, <Number: 3>]), <Operator: ]>]) -> "<Operator":" [>"
	"PythonNode(subscript, [<Operator: :>, <Number: 3>])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" [>, PythonNode(subscript, [<Operator": :>, <Number: 3>]), <Operator: ]>]) -> "PythonNode(subscript, [<Operator":" ":>, <Number: 3>])
	<Operator: :> [label=Operator]
	"PythonNode(subscript, [<Operator":" ":>, <Number: 3>]) -> "<Operator":" ":>
	<Number: 3> [label=Number]
	"PythonNode(subscript, [<Operator":" ":>, <Number: 3>]) -> "<Number":" 3>"
	<Operator: ]> [label=Operator]
	"PythonNode(trailer, [<Operator":" [>, PythonNode(subscript, [<Operator": :>, <Number: 3>]), <Operator: ]>]) -> "<Operator":" ]>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = chardet_version.split(\".\")[":3]@76,8>, <Newline: '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = chardet_version.split(".")[:3]@76,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline": '\n'>])
	<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@77,8> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline": '\n'>]) -> "<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@77,8>"
	"PythonNode(testlist_star_expr, [<Name: major@77,8>, <Operator: ,>, <Name: minor@77,15>, <Operator: ,>, <Name: patch@77,22>])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@77,8>" -> "PythonNode(testlist_star_expr, [<Name":" major@77,8>, <Operator": ,>, <Name: minor@77,15>, <Operator: ,>, <Name: patch@77,22>])
	<Name: major@77,8> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@77,8>, <Operator": ,>, <Name: minor@77,15>, <Operator: ,>, <Name: patch@77,22>]) -> "<Name":" major@77,8>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@77,8>, <Operator": ,>, <Name: minor@77,15>, <Operator: ,>, <Name: patch@77,22>]) -> "<Operator":" ,>"
	<Name: minor@77,15> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@77,8>, <Operator": ,>, <Name: minor@77,15>, <Operator: ,>, <Name: patch@77,22>]) -> "<Name":" minor@77,15>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@77,8>, <Operator": ,>, <Name: minor@77,15>, <Operator: ,>, <Name: patch@77,22>]) -> "<Operator":" ,>"
	<Name: patch@77,22> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@77,8>, <Operator": ,>, <Name: minor@77,15>, <Operator: ,>, <Name: patch@77,22>]) -> "<Name":" patch@77,22>"
	<Operator: => [label=Operator]
	"<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@77,8>" -> "<Operator":" =>"
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name: int@77,30>, PythonNode(trailer, [<Operator: (>, <Name: major@77,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@77,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@77,58>, <Operator: )>])])])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@77,8>" -> "PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@77,30>, PythonNode(trailer, [<Operator": (>, <Name: major@77,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@77,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@77,58>, <Operator: )>])])])
	"PythonNode(atom_expr, [<Name: int@77,30>, PythonNode(trailer, [<Operator: (>, <Name: major@77,34>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@77,30>, PythonNode(trailer, [<Operator": (>, <Name: major@77,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@77,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@77,58>, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" int@77,30>, PythonNode(trailer, [<Operator": (>, <Name: major@77,34>, <Operator: )>])])
	<Name: int@77,30> [label=Name]
	"PythonNode(atom_expr, [<Name":" int@77,30>, PythonNode(trailer, [<Operator": (>, <Name: major@77,34>, <Operator: )>])]) -> "<Name":" int@77,30>"
	"PythonNode(trailer, [<Operator: (>, <Name: major@77,34>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" int@77,30>, PythonNode(trailer, [<Operator": (>, <Name: major@77,34>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": major@77,34>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": major@77,34>, <Operator: )>]) -> "<Operator":" (>"
	<Name: major@77,34> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": major@77,34>, <Operator: )>]) -> "<Name":" major@77,34>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": major@77,34>, <Operator: )>]) -> "<Operator":" )>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@77,30>, PythonNode(trailer, [<Operator": (>, <Name: major@77,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@77,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@77,58>, <Operator: )>])])]) -> "<Operator":" ,>"
	"PythonNode(atom_expr, [<Name: int@77,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@77,46>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@77,30>, PythonNode(trailer, [<Operator": (>, <Name: major@77,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@77,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@77,58>, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" int@77,42>, PythonNode(trailer, [<Operator": (>, <Name: minor@77,46>, <Operator: )>])])
	<Name: int@77,42> [label=Name]
	"PythonNode(atom_expr, [<Name":" int@77,42>, PythonNode(trailer, [<Operator": (>, <Name: minor@77,46>, <Operator: )>])]) -> "<Name":" int@77,42>"
	"PythonNode(trailer, [<Operator: (>, <Name: minor@77,46>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" int@77,42>, PythonNode(trailer, [<Operator": (>, <Name: minor@77,46>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": minor@77,46>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": minor@77,46>, <Operator: )>]) -> "<Operator":" (>"
	<Name: minor@77,46> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": minor@77,46>, <Operator: )>]) -> "<Name":" minor@77,46>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": minor@77,46>, <Operator: )>]) -> "<Operator":" )>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@77,30>, PythonNode(trailer, [<Operator": (>, <Name: major@77,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@77,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@77,58>, <Operator: )>])])]) -> "<Operator":" ,>"
	"PythonNode(atom_expr, [<Name: int@77,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@77,58>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@77,30>, PythonNode(trailer, [<Operator": (>, <Name: major@77,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@77,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@77,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@77,58>, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" int@77,54>, PythonNode(trailer, [<Operator": (>, <Name: patch@77,58>, <Operator: )>])])
	<Name: int@77,54> [label=Name]
	"PythonNode(atom_expr, [<Name":" int@77,54>, PythonNode(trailer, [<Operator": (>, <Name: patch@77,58>, <Operator: )>])]) -> "<Name":" int@77,54>"
	"PythonNode(trailer, [<Operator: (>, <Name: patch@77,58>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" int@77,54>, PythonNode(trailer, [<Operator": (>, <Name: patch@77,58>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": patch@77,58>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": patch@77,58>, <Operator: )>]) -> "<Operator":" (>"
	<Name: patch@77,58> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": patch@77,58>, <Operator: )>]) -> "<Name":" patch@77,58>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": patch@77,58>, <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<AssertStmt: # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = chardet_version.split(".")[:3]@76,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@77,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<AssertStmt":" # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline": '\n'>])
	<AssertStmt: # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8> [label=AssertStmt]
	"PythonNode(simple_stmt, [<AssertStmt":" # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline": '\n'>]) -> "<AssertStmt":" # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>"
	<Keyword: assert> [label=Keyword]
	"<AssertStmt":" # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>" -> "<Keyword":" assert>"
	"PythonNode(comparison, [PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])])" [label=PythonNode]
	"<AssertStmt":" # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>" -> "PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])])
	"PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(testlist_comp, [<Number: 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>])" [label=PythonNode]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]) -> "PythonNode(testlist_comp, [<Number":" 3>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 2>])
	<Number: 3> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 3>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 2>]) -> "<Number":" 3>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 3>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 2>]) -> "<Operator":" ,>"
	<Number: 0> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 3>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 2>]) -> "<Number":" 0>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 3>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 2>]) -> "<Operator":" ,>"
	<Number: 2> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 3>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 2>]) -> "<Number":" 2>"
	<Operator: )> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]) -> "<Operator":" )>"
	<Operator: <=> [label=Operator]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "<Operator":" <=>"
	"PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(testlist_comp, [<Name: major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>])" [label=PythonNode]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]) -> "PythonNode(testlist_comp, [<Name":" major@79,29>, <Operator": ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>])
	<Name: major@79,29> [label=Name]
	"PythonNode(testlist_comp, [<Name":" major@79,29>, <Operator": ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]) -> "<Name":" major@79,29>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Name":" major@79,29>, <Operator": ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]) -> "<Operator":" ,>"
	<Name: minor@79,36> [label=Name]
	"PythonNode(testlist_comp, [<Name":" major@79,29>, <Operator": ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]) -> "<Name":" minor@79,36>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Name":" major@79,29>, <Operator": ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]) -> "<Operator":" ,>"
	<Name: patch@79,43> [label=Name]
	"PythonNode(testlist_comp, [<Name":" major@79,29>, <Operator": ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]) -> "<Name":" patch@79,43>"
	<Operator: )> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]) -> "<Operator":" )>"
	<Operator: <> [label=Operator]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "<Operator":" <>"
	"PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 3>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 2>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@79,29>, <Operator: ,>, <Name: minor@79,36>, <Operator: ,>, <Name: patch@79,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(testlist_comp, [<Number: 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>])" [label=PythonNode]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]) -> "PythonNode(testlist_comp, [<Number":" 6>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>])
	<Number: 6> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 6>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Number":" 6>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 6>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Operator":" ,>"
	<Number: 0> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 6>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Number":" 0>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 6>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Operator":" ,>"
	<Number: 0> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 6>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Number":" 0>"
	<Operator: )> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 6>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<AssertStmt":" # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)@79,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<Keyword: elif> [label=Keyword]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "<Keyword":" elif>"
	<Name: charset_normalizer_version@80,9> [label=Name]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "<Name":" charset_normalizer_version@80,9>"
	<Operator: :> [label=Operator]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = charset_normalizer_version.split(\".\")[:3]@81,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline: '\n'>])])" [label=PythonNode]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = charset_normalizer_version.split(".")[:3]@81,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = charset_normalizer_version.split(".")[:3]@81,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = charset_normalizer_version.split(\".\")[:3]@81,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = charset_normalizer_version.split(".")[:3]@81,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = charset_normalizer_version.split(\".\")[":3]@81,8>, <Newline: '\n'>])
	<ExprStmt: major, minor, patch = charset_normalizer_version.split(".")[:3]@81,8> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = charset_normalizer_version.split(\".\")[":3]@81,8>, <Newline: '\n'>]) -> "<ExprStmt":" major, minor, patch = charset_normalizer_version.split(\".\")[":3]@81,8>
	"PythonNode(testlist_star_expr, [<Name: major@81,8>, <Operator: ,>, <Name: minor@81,15>, <Operator: ,>, <Name: patch@81,22>])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = charset_normalizer_version.split(\".\")[":3]@81,8> -> "PythonNode(testlist_star_expr, [<Name":" major@81,8>, <Operator": ,>, <Name: minor@81,15>, <Operator: ,>, <Name: patch@81,22>])
	<Name: major@81,8> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@81,8>, <Operator": ,>, <Name: minor@81,15>, <Operator: ,>, <Name: patch@81,22>]) -> "<Name":" major@81,8>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@81,8>, <Operator": ,>, <Name: minor@81,15>, <Operator: ,>, <Name: patch@81,22>]) -> "<Operator":" ,>"
	<Name: minor@81,15> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@81,8>, <Operator": ,>, <Name: minor@81,15>, <Operator: ,>, <Name: patch@81,22>]) -> "<Name":" minor@81,15>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@81,8>, <Operator": ,>, <Name: minor@81,15>, <Operator: ,>, <Name: patch@81,22>]) -> "<Operator":" ,>"
	<Name: patch@81,22> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@81,8>, <Operator": ,>, <Name: minor@81,15>, <Operator: ,>, <Name: patch@81,22>]) -> "<Name":" patch@81,22>"
	<Operator: => [label=Operator]
	"<ExprStmt":" major, minor, patch = charset_normalizer_version.split(\".\")[":3]@81,8> -> "<Operator":" =>"
	"PythonNode(atom_expr, [<Name: charset_normalizer_version@81,30>, PythonNode(trailer, [<Operator: .>, <Name: split@81,57>]), PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = charset_normalizer_version.split(\".\")[":3]@81,8> -> "PythonNode(atom_expr, [<Name":" charset_normalizer_version@81,30>, PythonNode(trailer, [<Operator": .>, <Name: split@81,57>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])])
	<Name: charset_normalizer_version@81,30> [label=Name]
	"PythonNode(atom_expr, [<Name":" charset_normalizer_version@81,30>, PythonNode(trailer, [<Operator": .>, <Name: split@81,57>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])]) -> "<Name":" charset_normalizer_version@81,30>"
	"PythonNode(trailer, [<Operator: .>, <Name: split@81,57>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" charset_normalizer_version@81,30>, PythonNode(trailer, [<Operator": .>, <Name: split@81,57>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": split@81,57>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": split@81,57>]) -> "<Operator":" .>"
	<Name: split@81,57> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": split@81,57>]) -> "<Name":" split@81,57>"
	"PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" charset_normalizer_version@81,30>, PythonNode(trailer, [<Operator": .>, <Name: split@81,57>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])]) -> "PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<Operator":" (>"
	<String: "."> [label=String]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<String":" \".\">"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<Operator":" )>"
	"PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" charset_normalizer_version@81,30>, PythonNode(trailer, [<Operator": .>, <Name: split@81,57>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>]), PythonNode(trailer, [<Operator: [>, PythonNode(subscript, [<Operator: :>, <Number: 3>]), <Operator: ]>])]) -> "PythonNode(trailer, [<Operator":" [>, PythonNode(subscript, [<Operator": :>, <Number: 3>]), <Operator: ]>])
	<Operator: [> [label=Operator]
	"PythonNode(trailer, [<Operator":" [>, PythonNode(subscript, [<Operator": :>, <Number: 3>]), <Operator: ]>]) -> "<Operator":" [>"
	"PythonNode(subscript, [<Operator: :>, <Number: 3>])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" [>, PythonNode(subscript, [<Operator": :>, <Number: 3>]), <Operator: ]>]) -> "PythonNode(subscript, [<Operator":" ":>, <Number: 3>])
	<Operator: :> [label=Operator]
	"PythonNode(subscript, [<Operator":" ":>, <Number: 3>]) -> "<Operator":" ":>
	<Number: 3> [label=Number]
	"PythonNode(subscript, [<Operator":" ":>, <Number: 3>]) -> "<Number":" 3>"
	<Operator: ]> [label=Operator]
	"PythonNode(trailer, [<Operator":" [>, PythonNode(subscript, [<Operator": :>, <Number: 3>]), <Operator: ]>]) -> "<Operator":" ]>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = charset_normalizer_version.split(\".\")[":3]@81,8>, <Newline: '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = charset_normalizer_version.split(".")[:3]@81,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline": '\n'>])
	<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@82,8> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline": '\n'>]) -> "<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@82,8>"
	"PythonNode(testlist_star_expr, [<Name: major@82,8>, <Operator: ,>, <Name: minor@82,15>, <Operator: ,>, <Name: patch@82,22>])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@82,8>" -> "PythonNode(testlist_star_expr, [<Name":" major@82,8>, <Operator": ,>, <Name: minor@82,15>, <Operator: ,>, <Name: patch@82,22>])
	<Name: major@82,8> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@82,8>, <Operator": ,>, <Name: minor@82,15>, <Operator: ,>, <Name: patch@82,22>]) -> "<Name":" major@82,8>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@82,8>, <Operator": ,>, <Name: minor@82,15>, <Operator: ,>, <Name: patch@82,22>]) -> "<Operator":" ,>"
	<Name: minor@82,15> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@82,8>, <Operator": ,>, <Name: minor@82,15>, <Operator: ,>, <Name: patch@82,22>]) -> "<Name":" minor@82,15>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [<Name":" major@82,8>, <Operator": ,>, <Name: minor@82,15>, <Operator: ,>, <Name: patch@82,22>]) -> "<Operator":" ,>"
	<Name: patch@82,22> [label=Name]
	"PythonNode(testlist_star_expr, [<Name":" major@82,8>, <Operator": ,>, <Name: minor@82,15>, <Operator: ,>, <Name: patch@82,22>]) -> "<Name":" patch@82,22>"
	<Operator: => [label=Operator]
	"<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@82,8>" -> "<Operator":" =>"
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name: int@82,30>, PythonNode(trailer, [<Operator: (>, <Name: major@82,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@82,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@82,58>, <Operator: )>])])])" [label=PythonNode]
	"<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@82,8>" -> "PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@82,30>, PythonNode(trailer, [<Operator": (>, <Name: major@82,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@82,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@82,58>, <Operator: )>])])])
	"PythonNode(atom_expr, [<Name: int@82,30>, PythonNode(trailer, [<Operator: (>, <Name: major@82,34>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@82,30>, PythonNode(trailer, [<Operator": (>, <Name: major@82,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@82,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@82,58>, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" int@82,30>, PythonNode(trailer, [<Operator": (>, <Name: major@82,34>, <Operator: )>])])
	<Name: int@82,30> [label=Name]
	"PythonNode(atom_expr, [<Name":" int@82,30>, PythonNode(trailer, [<Operator": (>, <Name: major@82,34>, <Operator: )>])]) -> "<Name":" int@82,30>"
	"PythonNode(trailer, [<Operator: (>, <Name: major@82,34>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" int@82,30>, PythonNode(trailer, [<Operator": (>, <Name: major@82,34>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": major@82,34>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": major@82,34>, <Operator: )>]) -> "<Operator":" (>"
	<Name: major@82,34> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": major@82,34>, <Operator: )>]) -> "<Name":" major@82,34>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": major@82,34>, <Operator: )>]) -> "<Operator":" )>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@82,30>, PythonNode(trailer, [<Operator": (>, <Name: major@82,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@82,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@82,58>, <Operator: )>])])]) -> "<Operator":" ,>"
	"PythonNode(atom_expr, [<Name: int@82,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@82,46>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@82,30>, PythonNode(trailer, [<Operator": (>, <Name: major@82,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@82,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@82,58>, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" int@82,42>, PythonNode(trailer, [<Operator": (>, <Name: minor@82,46>, <Operator: )>])])
	<Name: int@82,42> [label=Name]
	"PythonNode(atom_expr, [<Name":" int@82,42>, PythonNode(trailer, [<Operator": (>, <Name: minor@82,46>, <Operator: )>])]) -> "<Name":" int@82,42>"
	"PythonNode(trailer, [<Operator: (>, <Name: minor@82,46>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" int@82,42>, PythonNode(trailer, [<Operator": (>, <Name: minor@82,46>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": minor@82,46>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": minor@82,46>, <Operator: )>]) -> "<Operator":" (>"
	<Name: minor@82,46> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": minor@82,46>, <Operator: )>]) -> "<Name":" minor@82,46>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": minor@82,46>, <Operator: )>]) -> "<Operator":" )>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@82,30>, PythonNode(trailer, [<Operator": (>, <Name: major@82,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@82,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@82,58>, <Operator: )>])])]) -> "<Operator":" ,>"
	"PythonNode(atom_expr, [<Name: int@82,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@82,58>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(testlist_star_expr, [PythonNode(atom_expr, [<Name":" int@82,30>, PythonNode(trailer, [<Operator": (>, <Name: major@82,34>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,42>, PythonNode(trailer, [<Operator: (>, <Name: minor@82,46>, <Operator: )>])]), <Operator: ,>, PythonNode(atom_expr, [<Name: int@82,54>, PythonNode(trailer, [<Operator: (>, <Name: patch@82,58>, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" int@82,54>, PythonNode(trailer, [<Operator": (>, <Name: patch@82,58>, <Operator: )>])])
	<Name: int@82,54> [label=Name]
	"PythonNode(atom_expr, [<Name":" int@82,54>, PythonNode(trailer, [<Operator": (>, <Name: patch@82,58>, <Operator: )>])]) -> "<Name":" int@82,54>"
	"PythonNode(trailer, [<Operator: (>, <Name: patch@82,58>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" int@82,54>, PythonNode(trailer, [<Operator": (>, <Name: patch@82,58>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": patch@82,58>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": patch@82,58>, <Operator: )>]) -> "<Operator":" (>"
	<Name: patch@82,58> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": patch@82,58>, <Operator: )>]) -> "<Name":" patch@82,58>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": patch@82,58>, <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<AssertStmt: # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": major, minor, patch = charset_normalizer_version.split(".")[:3]@81,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<ExprStmt: major, minor, patch = int(major), int(minor), int(patch)@82,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [<AssertStmt: # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<AssertStmt":" # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline": '\n'>])
	<AssertStmt: # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8> [label=AssertStmt]
	"PythonNode(simple_stmt, [<AssertStmt":" # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline": '\n'>]) -> "<AssertStmt":" # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>"
	<Keyword: assert> [label=Keyword]
	"<AssertStmt":" # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>" -> "<Keyword":" assert>"
	"PythonNode(comparison, [PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])])" [label=PythonNode]
	"<AssertStmt":" # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>" -> "PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])])
	"PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(testlist_comp, [<Number: 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>])" [label=PythonNode]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]) -> "PythonNode(testlist_comp, [<Number":" 2>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>])
	<Number: 2> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 2>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Number":" 2>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 2>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Operator":" ,>"
	<Number: 0> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 2>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Number":" 0>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 2>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Operator":" ,>"
	<Number: 0> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 2>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Number":" 0>"
	<Operator: )> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]) -> "<Operator":" )>"
	<Operator: <=> [label=Operator]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "<Operator":" <=>"
	"PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(testlist_comp, [<Name: major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>])" [label=PythonNode]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]) -> "PythonNode(testlist_comp, [<Name":" major@84,29>, <Operator": ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>])
	<Name: major@84,29> [label=Name]
	"PythonNode(testlist_comp, [<Name":" major@84,29>, <Operator": ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]) -> "<Name":" major@84,29>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Name":" major@84,29>, <Operator": ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]) -> "<Operator":" ,>"
	<Name: minor@84,36> [label=Name]
	"PythonNode(testlist_comp, [<Name":" major@84,29>, <Operator": ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]) -> "<Name":" minor@84,36>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Name":" major@84,29>, <Operator": ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]) -> "<Operator":" ,>"
	<Name: patch@84,43> [label=Name]
	"PythonNode(testlist_comp, [<Name":" major@84,29>, <Operator": ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]) -> "<Name":" patch@84,43>"
	<Operator: )> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]) -> "<Operator":" )>"
	<Operator: <> [label=Operator]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "<Operator":" <>"
	"PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(comparison, [PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 2>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]), <Operator: <=>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: major@84,29>, <Operator: ,>, <Name: minor@84,36>, <Operator: ,>, <Name: patch@84,43>]), <Operator: )>]), <Operator: <>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Number: 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])]) -> "PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(testlist_comp, [<Number: 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>])" [label=PythonNode]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]) -> "PythonNode(testlist_comp, [<Number":" 4>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>])
	<Number: 4> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 4>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Number":" 4>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 4>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Operator":" ,>"
	<Number: 0> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 4>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Number":" 0>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 4>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Operator":" ,>"
	<Number: 0> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 4>, <Operator": ,>, <Number: 0>, <Operator: ,>, <Number: 0>]) -> "<Number":" 0>"
	<Operator: )> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Number": 4>, <Operator: ,>, <Number: 0>, <Operator: ,>, <Number: 0>]), <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<AssertStmt":" # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)@84,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<Keyword: else> [label=Keyword]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "<Keyword":" else>"
	<Operator: :> [label=Operator]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<KeywordStatement: raise Exception(\"You need either charset_normalizer or chardet installed\")@86,8>, <Newline: '\n'>])])" [label=PythonNode]
	"<IfStmt":" # Check charset_normalizer for compatibility.     if chardet_version":         major, minor, patch = chardet_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # chardet_version >= 3.0.2, < 6.0.0         assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)     elif charset_normalizer_version:         major, minor, patch = charset_normalizer_version.split(".")[:3]         major, minor, patch = int(major), int(minor), int(patch)         # charset_normalizer >= 2.0.0 < 4.0.0         assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)     else:         raise Exception("You need either charset_normalizer or chardet installed")@75,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<KeywordStatement": raise Exception("You need either charset_normalizer or chardet installed")@86,8>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<KeywordStatement": raise Exception("You need either charset_normalizer or chardet installed")@86,8>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<KeywordStatement: raise Exception(\"You need either charset_normalizer or chardet installed\")@86,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<KeywordStatement": raise Exception("You need either charset_normalizer or chardet installed")@86,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<KeywordStatement":" raise Exception(\"You need either charset_normalizer or chardet installed\")@86,8>, <Newline": '\n'>])
	<KeywordStatement: raise Exception("You need either charset_normalizer or chardet installed")@86,8> [label=KeywordStatement]
	"PythonNode(simple_stmt, [<KeywordStatement":" raise Exception(\"You need either charset_normalizer or chardet installed\")@86,8>, <Newline": '\n'>]) -> "<KeywordStatement":" raise Exception(\"You need either charset_normalizer or chardet installed\")@86,8>"
	<Keyword: raise> [label=Keyword]
	"<KeywordStatement":" raise Exception(\"You need either charset_normalizer or chardet installed\")@86,8>" -> "<Keyword":" raise>"
	"PythonNode(atom_expr, [<Name: Exception@86,14>, PythonNode(trailer, [<Operator: (>, <String: \"You need either charset_normalizer or chardet installed\">, <Operator: )>])])" [label=PythonNode]
	"<KeywordStatement":" raise Exception(\"You need either charset_normalizer or chardet installed\")@86,8>" -> "PythonNode(atom_expr, [<Name":" Exception@86,14>, PythonNode(trailer, [<Operator": (>, <String: "You need either charset_normalizer or chardet installed">, <Operator: )>])])
	<Name: Exception@86,14> [label=Name]
	"PythonNode(atom_expr, [<Name":" Exception@86,14>, PythonNode(trailer, [<Operator": (>, <String: "You need either charset_normalizer or chardet installed">, <Operator: )>])]) -> "<Name":" Exception@86,14>"
	"PythonNode(trailer, [<Operator: (>, <String: \"You need either charset_normalizer or chardet installed\">, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" Exception@86,14>, PythonNode(trailer, [<Operator": (>, <String: "You need either charset_normalizer or chardet installed">, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <String": "You need either charset_normalizer or chardet installed">, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": "You need either charset_normalizer or chardet installed">, <Operator: )>]) -> "<Operator":" (>"
	<String: "You need either charset_normalizer or chardet installed"> [label=String]
	"PythonNode(trailer, [<Operator":" (>, <String": "You need either charset_normalizer or chardet installed">, <Operator: )>]) -> "<String":" \"You need either charset_normalizer or chardet installed\">"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": "You need either charset_normalizer or chardet installed">, <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<KeywordStatement":" raise Exception(\"You need either charset_normalizer or chardet installed\")@86,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<Function: _check_cryptography@89-101> [label=Function]
	"<Module":" @6-181>" -> "<Function":" _check_cryptography@89-101>"
	<Keyword: def> [label=Keyword]
	"<Function":" _check_cryptography@89-101>" -> "<Keyword":" def>"
	<Name: _check_cryptography@89,4> [label=Name]
	"<Function":" _check_cryptography@89-101>" -> "<Name":" _check_cryptography@89,4>"
	"PythonNode(parameters, [<Operator: (>, <Param: <Name: cryptography_version@89,24>>, <Operator: )>])" [label=PythonNode]
	"<Function":" _check_cryptography@89-101>" -> "PythonNode(parameters, [<Operator":" (>, <Param": <Name: cryptography_version@89,24>>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(parameters, [<Operator":" (>, <Param": <Name: cryptography_version@89,24>>, <Operator: )>]) -> "<Operator":" (>"
	<Param: <Name: cryptography_version@89,24>> [label=Param]
	"PythonNode(parameters, [<Operator":" (>, <Param": <Name: cryptography_version@89,24>>, <Operator: )>]) -> "<Param":" <Name": cryptography_version@89,24>>
	<Name: cryptography_version@89,24> [label=Name]
	"<Param":" <Name": cryptography_version@89,24>> -> "<Name":" cryptography_version@89,24>"
	<Operator: )> [label=Operator]
	"PythonNode(parameters, [<Operator":" (>, <Param": <Name: cryptography_version@89,24>>, <Operator: )>]) -> "<Operator":" )>"
	<Operator: :> [label=Operator]
	"<Function":" _check_cryptography@89-101>" -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, <TryStmt: # cryptography < 1.3.4     try:         cryptography_version = list(map(int, cryptography_version.split(\".\")))     except ValueError:         return@91,4>, <IfStmt: if cryptography_version < [1, 3, 4]:         warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4>])" [label=PythonNode]
	"<Function":" _check_cryptography@89-101>" -> "PythonNode(suite, [<Newline":" '\n'>, <TryStmt": # cryptography < 1.3.4     try:         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4>, <IfStmt: if cryptography_version < [1, 3, 4]:         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4>])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, <TryStmt": # cryptography < 1.3.4     try:         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4>, <IfStmt: if cryptography_version < [1, 3, 4]:         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4>]) -> "<Newline":" '\n'>"
	<TryStmt: # cryptography < 1.3.4     try:         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4> [label=TryStmt]
	"PythonNode(suite, [<Newline":" '\n'>, <TryStmt": # cryptography < 1.3.4     try:         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4>, <IfStmt: if cryptography_version < [1, 3, 4]:         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4>]) -> "<TryStmt":" # cryptography < 1.3.4     try":         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4>
	<Keyword: try> [label=Keyword]
	"<TryStmt":" # cryptography < 1.3.4     try":         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4> -> "<Keyword":" try>"
	<Operator: :> [label=Operator]
	"<TryStmt":" # cryptography < 1.3.4     try":         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ExprStmt: cryptography_version = list(map(int, cryptography_version.split(\".\")))@92,8>, <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" # cryptography < 1.3.4     try":         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": cryptography_version = list(map(int, cryptography_version.split(".")))@92,8>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": cryptography_version = list(map(int, cryptography_version.split(".")))@92,8>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: cryptography_version = list(map(int, cryptography_version.split(\".\")))@92,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": cryptography_version = list(map(int, cryptography_version.split(".")))@92,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ExprStmt":" cryptography_version = list(map(int, cryptography_version.split(\".\")))@92,8>, <Newline": '\n'>])
	<ExprStmt: cryptography_version = list(map(int, cryptography_version.split(".")))@92,8> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" cryptography_version = list(map(int, cryptography_version.split(\".\")))@92,8>, <Newline": '\n'>]) -> "<ExprStmt":" cryptography_version = list(map(int, cryptography_version.split(\".\")))@92,8>"
	<Name: cryptography_version@92,8> [label=Name]
	"<ExprStmt":" cryptography_version = list(map(int, cryptography_version.split(\".\")))@92,8>" -> "<Name":" cryptography_version@92,8>"
	<Operator: => [label=Operator]
	"<ExprStmt":" cryptography_version = list(map(int, cryptography_version.split(\".\")))@92,8>" -> "<Operator":" =>"
	"PythonNode(atom_expr, [<Name: list@92,31>, PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])])]), <Operator: )>])]), <Operator: )>])])" [label=PythonNode]
	"<ExprStmt":" cryptography_version = list(map(int, cryptography_version.split(\".\")))@92,8>" -> "PythonNode(atom_expr, [<Name":" list@92,31>, PythonNode(trailer, [<Operator": (>, PythonNode(atom_expr, [<Name: map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])]), <Operator: )>])])
	<Name: list@92,31> [label=Name]
	"PythonNode(atom_expr, [<Name":" list@92,31>, PythonNode(trailer, [<Operator": (>, PythonNode(atom_expr, [<Name: map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])]), <Operator: )>])]) -> "<Name":" list@92,31>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])])]), <Operator: )>])]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" list@92,31>, PythonNode(trailer, [<Operator": (>, PythonNode(atom_expr, [<Name: map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(atom_expr, [<Name": map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(atom_expr, [<Name": map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(atom_expr, [<Name: map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])])]), <Operator: )>])])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(atom_expr, [<Name": map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])]), <Operator: )>]) -> "PythonNode(atom_expr, [<Name":" map@92,36>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])])
	<Name: map@92,36> [label=Name]
	"PythonNode(atom_expr, [<Name":" map@92,36>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])]) -> "<Name":" map@92,36>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])])]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" map@92,36>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])])])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>]) -> "PythonNode(arglist, [<Name":" int@92,40>, <Operator": ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])])
	<Name: int@92,40> [label=Name]
	"PythonNode(arglist, [<Name":" int@92,40>, <Operator": ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]) -> "<Name":" int@92,40>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [<Name":" int@92,40>, <Operator": ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]) -> "<Operator":" ,>"
	"PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])])" [label=PythonNode]
	"PythonNode(arglist, [<Name":" int@92,40>, <Operator": ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" cryptography_version@92,45>, PythonNode(trailer, [<Operator": .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])
	<Name: cryptography_version@92,45> [label=Name]
	"PythonNode(atom_expr, [<Name":" cryptography_version@92,45>, PythonNode(trailer, [<Operator": .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])]) -> "<Name":" cryptography_version@92,45>"
	"PythonNode(trailer, [<Operator: .>, <Name: split@92,66>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" cryptography_version@92,45>, PythonNode(trailer, [<Operator": .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": split@92,66>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": split@92,66>]) -> "<Operator":" .>"
	<Name: split@92,66> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": split@92,66>]) -> "<Name":" split@92,66>"
	"PythonNode(trailer, [<Operator: (>, <String: \".\">, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" cryptography_version@92,45>, PythonNode(trailer, [<Operator": .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<Operator":" (>"
	<String: "."> [label=String]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<String":" \".\">"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <String": ".">, <Operator: )>]) -> "<Operator":" )>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>]) -> "<Operator":" )>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(atom_expr, [<Name": map@92,36>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: int@92,40>, <Operator: ,>, PythonNode(atom_expr, [<Name: cryptography_version@92,45>, PythonNode(trailer, [<Operator: .>, <Name: split@92,66>]), PythonNode(trailer, [<Operator: (>, <String: ".">, <Operator: )>])])]), <Operator: )>])]), <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" cryptography_version = list(map(int, cryptography_version.split(\".\")))@92,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(except_clause, [<Keyword: except>, <Name: ValueError@93,11>])" [label=PythonNode]
	"<TryStmt":" # cryptography < 1.3.4     try":         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4> -> "PythonNode(except_clause, [<Keyword":" except>, <Name": ValueError@93,11>])
	<Keyword: except> [label=Keyword]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ValueError@93,11>]) -> "<Keyword":" except>"
	<Name: ValueError@93,11> [label=Name]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ValueError@93,11>]) -> "<Name":" ValueError@93,11>"
	<Operator: :> [label=Operator]
	"<TryStmt":" # cryptography < 1.3.4     try":         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<Keyword: return>, <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" # cryptography < 1.3.4     try":         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<Keyword": return>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<Keyword": return>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<Keyword: return>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<Keyword": return>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<Keyword":" return>, <Newline": '\n'>])
	<Keyword: return> [label=Keyword]
	"PythonNode(simple_stmt, [<Keyword":" return>, <Newline": '\n'>]) -> "<Keyword":" return>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<Keyword":" return>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<IfStmt: if cryptography_version < [1, 3, 4]:         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4> [label=IfStmt]
	"PythonNode(suite, [<Newline":" '\n'>, <TryStmt": # cryptography < 1.3.4     try:         cryptography_version = list(map(int, cryptography_version.split(".")))     except ValueError:         return@91,4>, <IfStmt: if cryptography_version < [1, 3, 4]:         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4>]) -> "<IfStmt":" if cryptography_version < [1, 3, 4]":         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4>
	<Keyword: if> [label=Keyword]
	"<IfStmt":" if cryptography_version < [1, 3, 4]":         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4> -> "<Keyword":" if>"
	"PythonNode(comparison, [<Name: cryptography_version@96,7>, <Operator: <>, PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>])])" [label=PythonNode]
	"<IfStmt":" if cryptography_version < [1, 3, 4]":         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4> -> "PythonNode(comparison, [<Name":" cryptography_version@96,7>, <Operator": <>, PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>])])
	<Name: cryptography_version@96,7> [label=Name]
	"PythonNode(comparison, [<Name":" cryptography_version@96,7>, <Operator": <>, PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>])]) -> "<Name":" cryptography_version@96,7>"
	<Operator: <> [label=Operator]
	"PythonNode(comparison, [<Name":" cryptography_version@96,7>, <Operator": <>, PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>])]) -> "<Operator":" <>"
	"PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>])" [label=PythonNode]
	"PythonNode(comparison, [<Name":" cryptography_version@96,7>, <Operator": <>, PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>])]) -> "PythonNode(atom, [<Operator":" [>, PythonNode(testlist_comp, [<Number": 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>])
	<Operator: [> [label=Operator]
	"PythonNode(atom, [<Operator":" [>, PythonNode(testlist_comp, [<Number": 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>]) -> "<Operator":" [>"
	"PythonNode(testlist_comp, [<Number: 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>])" [label=PythonNode]
	"PythonNode(atom, [<Operator":" [>, PythonNode(testlist_comp, [<Number": 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>]) -> "PythonNode(testlist_comp, [<Number":" 1>, <Operator": ,>, <Number: 3>, <Operator: ,>, <Number: 4>])
	<Number: 1> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 1>, <Operator": ,>, <Number: 3>, <Operator: ,>, <Number: 4>]) -> "<Number":" 1>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 1>, <Operator": ,>, <Number: 3>, <Operator: ,>, <Number: 4>]) -> "<Operator":" ,>"
	<Number: 3> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 1>, <Operator": ,>, <Number: 3>, <Operator: ,>, <Number: 4>]) -> "<Number":" 3>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Number":" 1>, <Operator": ,>, <Number: 3>, <Operator: ,>, <Number: 4>]) -> "<Operator":" ,>"
	<Number: 4> [label=Number]
	"PythonNode(testlist_comp, [<Number":" 1>, <Operator": ,>, <Number: 3>, <Operator: ,>, <Number: 4>]) -> "<Number":" 4>"
	<Operator: ]> [label=Operator]
	"PythonNode(atom, [<Operator":" [>, PythonNode(testlist_comp, [<Number": 1>, <Operator: ,>, <Number: 3>, <Operator: ,>, <Number: 4>]), <Operator: ]>]) -> "<Operator":" ]>"
	<Operator: :> [label=Operator]
	"<IfStmt":" if cryptography_version < [1, 3, 4]":         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ExprStmt: warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )@97,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@100,8>, PythonNode(trailer, [<Operator: .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]), <Newline: '\n'>])])" [label=PythonNode]
	"<IfStmt":" if cryptography_version < [1, 3, 4]":         warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )         warnings.warn(warning, RequestsDependencyWarning)@96,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )@97,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@100,8>, PythonNode(trailer, [<Operator: .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]), <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )@97,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@100,8>, PythonNode(trailer, [<Operator: .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]), <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )@97,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )@97,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@100,8>, PythonNode(trailer, [<Operator: .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]), <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ExprStmt":" warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )@97,8>, <Newline": '\n'>])
	<ExprStmt: warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )@97,8> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )@97,8>, <Newline": '\n'>]) -> "<ExprStmt":" warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )@97,8>"
	<Name: warning@97,8> [label=Name]
	"<ExprStmt":" warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )@97,8>" -> "<Name":" warning@97,8>"
	<Operator: => [label=Operator]
	"<ExprStmt":" warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )@97,8>" -> "<Operator":" =>"
	"PythonNode(atom_expr, [<String: \"Old version of cryptography ({}) may cause slowdown.\">, PythonNode(trailer, [<Operator: .>, <Name: format@97,73>]), PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@98,12>, <Operator: )>])])" [label=PythonNode]
	"<ExprStmt":" warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )@97,8>" -> "PythonNode(atom_expr, [<String":" \"Old version of cryptography ({}) may cause slowdown.\">, PythonNode(trailer, [<Operator": .>, <Name: format@97,73>]), PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@98,12>, <Operator: )>])])
	<String: "Old version of cryptography ({}) may cause slowdown."> [label=String]
	"PythonNode(atom_expr, [<String":" \"Old version of cryptography ({}) may cause slowdown.\">, PythonNode(trailer, [<Operator": .>, <Name: format@97,73>]), PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@98,12>, <Operator: )>])]) -> "<String":" \"Old version of cryptography ({}) may cause slowdown.\">"
	"PythonNode(trailer, [<Operator: .>, <Name: format@97,73>])" [label=PythonNode]
	"PythonNode(atom_expr, [<String":" \"Old version of cryptography ({}) may cause slowdown.\">, PythonNode(trailer, [<Operator": .>, <Name: format@97,73>]), PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@98,12>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": format@97,73>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": format@97,73>]) -> "<Operator":" .>"
	<Name: format@97,73> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": format@97,73>]) -> "<Name":" format@97,73>"
	"PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@98,12>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<String":" \"Old version of cryptography ({}) may cause slowdown.\">, PythonNode(trailer, [<Operator": .>, <Name: format@97,73>]), PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@98,12>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": cryptography_version@98,12>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": cryptography_version@98,12>, <Operator: )>]) -> "<Operator":" (>"
	<Name: cryptography_version@98,12> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": cryptography_version@98,12>, <Operator: )>]) -> "<Name":" cryptography_version@98,12>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": cryptography_version@98,12>, <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" warning = \"Old version of cryptography ({}) may cause slowdown.\".format(             cryptography_version         )@97,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@100,8>, PythonNode(trailer, [<Operator: .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]), <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": warning = "Old version of cryptography ({}) may cause slowdown.".format(             cryptography_version         )@97,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@100,8>, PythonNode(trailer, [<Operator: .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]), <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@100,8>, PythonNode(trailer, [<Operator": .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]), <Newline: '\n'>])
	"PythonNode(atom_expr, [<Name: warnings@100,8>, PythonNode(trailer, [<Operator: .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])])" [label=PythonNode]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@100,8>, PythonNode(trailer, [<Operator": .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]), <Newline: '\n'>]) -> "PythonNode(atom_expr, [<Name":" warnings@100,8>, PythonNode(trailer, [<Operator": .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])])
	<Name: warnings@100,8> [label=Name]
	"PythonNode(atom_expr, [<Name":" warnings@100,8>, PythonNode(trailer, [<Operator": .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]) -> "<Name":" warnings@100,8>"
	"PythonNode(trailer, [<Operator: .>, <Name: warn@100,17>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" warnings@100,8>, PythonNode(trailer, [<Operator": .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": warn@100,17>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": warn@100,17>]) -> "<Operator":" .>"
	<Name: warn@100,17> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": warn@100,17>]) -> "<Name":" warn@100,17>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" warnings@100,8>, PythonNode(trailer, [<Operator": .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>]) -> "PythonNode(arglist, [<Name":" warning@100,22>, <Operator": ,>, <Name: RequestsDependencyWarning@100,31>])
	<Name: warning@100,22> [label=Name]
	"PythonNode(arglist, [<Name":" warning@100,22>, <Operator": ,>, <Name: RequestsDependencyWarning@100,31>]) -> "<Name":" warning@100,22>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [<Name":" warning@100,22>, <Operator": ,>, <Name: RequestsDependencyWarning@100,31>]) -> "<Operator":" ,>"
	<Name: RequestsDependencyWarning@100,31> [label=Name]
	"PythonNode(arglist, [<Name":" warning@100,22>, <Operator": ,>, <Name: RequestsDependencyWarning@100,31>]) -> "<Name":" RequestsDependencyWarning@100,31>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@100,8>, PythonNode(trailer, [<Operator": .>, <Name: warn@100,17>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: warning@100,22>, <Operator: ,>, <Name: RequestsDependencyWarning@100,31>]), <Operator: )>])]), <Newline: '\n'>]) -> "<Newline":" '\n'>"
	<TryStmt: # Check imported dependencies for compatibility. try:     check_compatibility(         urllib3.__version__, chardet_version, charset_normalizer_version     ) except (AssertionError, ValueError):     warnings.warn(         "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported "         "version!".format(             urllib3.__version__, chardet_version, charset_normalizer_version         ),         RequestsDependencyWarning,     )@104,0> [label=TryStmt]
	"<Module":" @6-181>" -> "<TryStmt":" # Check imported dependencies for compatibility. try":     check_compatibility(         urllib3.__version__, chardet_version, charset_normalizer_version     ) except (AssertionError, ValueError):     warnings.warn(         "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported "         "version!".format(             urllib3.__version__, chardet_version, charset_normalizer_version         ),         RequestsDependencyWarning,     )@104,0>
	<Keyword: try> [label=Keyword]
	"<TryStmt":" # Check imported dependencies for compatibility. try":     check_compatibility(         urllib3.__version__, chardet_version, charset_normalizer_version     ) except (AssertionError, ValueError):     warnings.warn(         "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported "         "version!".format(             urllib3.__version__, chardet_version, charset_normalizer_version         ),         RequestsDependencyWarning,     )@104,0> -> "<Keyword":" try>"
	<Operator: :> [label=Operator]
	"<TryStmt":" # Check imported dependencies for compatibility. try":     check_compatibility(         urllib3.__version__, chardet_version, charset_normalizer_version     ) except (AssertionError, ValueError):     warnings.warn(         "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported "         "version!".format(             urllib3.__version__, chardet_version, charset_normalizer_version         ),         RequestsDependencyWarning,     )@104,0> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: check_compatibility@105,4>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]), <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" # Check imported dependencies for compatibility. try":     check_compatibility(         urllib3.__version__, chardet_version, charset_normalizer_version     ) except (AssertionError, ValueError):     warnings.warn(         "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported "         "version!".format(             urllib3.__version__, chardet_version, charset_normalizer_version         ),         RequestsDependencyWarning,     )@104,0> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name": check_compatibility@105,4>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]), <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name": check_compatibility@105,4>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]), <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: check_compatibility@105,4>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]), <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name": check_compatibility@105,4>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]), <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" check_compatibility@105,4>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]), <Newline: '\n'>])
	"PythonNode(atom_expr, [<Name: check_compatibility@105,4>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])])" [label=PythonNode]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" check_compatibility@105,4>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]), <Newline: '\n'>]) -> "PythonNode(atom_expr, [<Name":" check_compatibility@105,4>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])])
	<Name: check_compatibility@105,4> [label=Name]
	"PythonNode(atom_expr, [<Name":" check_compatibility@105,4>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]) -> "<Name":" check_compatibility@105,4>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" check_compatibility@105,4>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name": urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name": urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name": urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>]) -> "PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@106,8>, PythonNode(trailer, [<Operator": .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>])
	"PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])])" [label=PythonNode]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@106,8>, PythonNode(trailer, [<Operator": .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]) -> "PythonNode(atom_expr, [<Name":" urllib3@106,8>, PythonNode(trailer, [<Operator": .>, <Name: __version__@106,16>])])
	<Name: urllib3@106,8> [label=Name]
	"PythonNode(atom_expr, [<Name":" urllib3@106,8>, PythonNode(trailer, [<Operator": .>, <Name: __version__@106,16>])]) -> "<Name":" urllib3@106,8>"
	"PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" urllib3@106,8>, PythonNode(trailer, [<Operator": .>, <Name: __version__@106,16>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": __version__@106,16>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": __version__@106,16>]) -> "<Operator":" .>"
	<Name: __version__@106,16> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": __version__@106,16>]) -> "<Name":" __version__@106,16>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@106,8>, PythonNode(trailer, [<Operator": .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]) -> "<Operator":" ,>"
	<Name: chardet_version@106,29> [label=Name]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@106,8>, PythonNode(trailer, [<Operator": .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]) -> "<Name":" chardet_version@106,29>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@106,8>, PythonNode(trailer, [<Operator": .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]) -> "<Operator":" ,>"
	<Name: charset_normalizer_version@106,46> [label=Name]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@106,8>, PythonNode(trailer, [<Operator": .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]) -> "<Name":" charset_normalizer_version@106,46>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name": urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" check_compatibility@105,4>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@106,8>, PythonNode(trailer, [<Operator: .>, <Name: __version__@106,16>])]), <Operator: ,>, <Name: chardet_version@106,29>, <Operator: ,>, <Name: charset_normalizer_version@106,46>]), <Operator: )>])]), <Newline: '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(except_clause, [<Keyword: except>, PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>]), <Operator: )>])])" [label=PythonNode]
	"<TryStmt":" # Check imported dependencies for compatibility. try":     check_compatibility(         urllib3.__version__, chardet_version, charset_normalizer_version     ) except (AssertionError, ValueError):     warnings.warn(         "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported "         "version!".format(             urllib3.__version__, chardet_version, charset_normalizer_version         ),         RequestsDependencyWarning,     )@104,0> -> "PythonNode(except_clause, [<Keyword":" except>, PythonNode(atom, [<Operator": (>, PythonNode(testlist_comp, [<Name: AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>]), <Operator: )>])])
	<Keyword: except> [label=Keyword]
	"PythonNode(except_clause, [<Keyword":" except>, PythonNode(atom, [<Operator": (>, PythonNode(testlist_comp, [<Name: AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>]), <Operator: )>])]) -> "<Keyword":" except>"
	"PythonNode(atom, [<Operator: (>, PythonNode(testlist_comp, [<Name: AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(except_clause, [<Keyword":" except>, PythonNode(atom, [<Operator": (>, PythonNode(testlist_comp, [<Name: AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>]), <Operator: )>])]) -> "PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(testlist_comp, [<Name: AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>])" [label=PythonNode]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>]), <Operator: )>]) -> "PythonNode(testlist_comp, [<Name":" AssertionError@108,8>, <Operator": ,>, <Name: ValueError@108,24>])
	<Name: AssertionError@108,8> [label=Name]
	"PythonNode(testlist_comp, [<Name":" AssertionError@108,8>, <Operator": ,>, <Name: ValueError@108,24>]) -> "<Name":" AssertionError@108,8>"
	<Operator: ,> [label=Operator]
	"PythonNode(testlist_comp, [<Name":" AssertionError@108,8>, <Operator": ,>, <Name: ValueError@108,24>]) -> "<Operator":" ,>"
	<Name: ValueError@108,24> [label=Name]
	"PythonNode(testlist_comp, [<Name":" AssertionError@108,8>, <Operator": ,>, <Name: ValueError@108,24>]) -> "<Name":" ValueError@108,24>"
	<Operator: )> [label=Operator]
	"PythonNode(atom, [<Operator":" (>, PythonNode(testlist_comp, [<Name": AssertionError@108,8>, <Operator: ,>, <Name: ValueError@108,24>]), <Operator: )>]) -> "<Operator":" )>"
	<Operator: :> [label=Operator]
	"<TryStmt":" # Check imported dependencies for compatibility. try":     check_compatibility(         urllib3.__version__, chardet_version, charset_normalizer_version     ) except (AssertionError, ValueError):     warnings.warn(         "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported "         "version!".format(             urllib3.__version__, chardet_version, charset_normalizer_version         ),         RequestsDependencyWarning,     )@104,0> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@109,4>, PythonNode(trailer, [<Operator: .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String: \"version!\">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]), <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" # Check imported dependencies for compatibility. try":     check_compatibility(         urllib3.__version__, chardet_version, charset_normalizer_version     ) except (AssertionError, ValueError):     warnings.warn(         "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported "         "version!".format(             urllib3.__version__, chardet_version, charset_normalizer_version         ),         RequestsDependencyWarning,     )@104,0> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name": warnings@109,4>, PythonNode(trailer, [<Operator: .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]), <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name": warnings@109,4>, PythonNode(trailer, [<Operator: .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]), <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@109,4>, PythonNode(trailer, [<Operator: .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String: \"version!\">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]), <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name": warnings@109,4>, PythonNode(trailer, [<Operator: .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]), <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@109,4>, PythonNode(trailer, [<Operator": .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]), <Newline: '\n'>])
	"PythonNode(atom_expr, [<Name: warnings@109,4>, PythonNode(trailer, [<Operator: .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String: \"version!\">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])])" [label=PythonNode]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@109,4>, PythonNode(trailer, [<Operator": .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]), <Newline: '\n'>]) -> "PythonNode(atom_expr, [<Name":" warnings@109,4>, PythonNode(trailer, [<Operator": .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])])
	<Name: warnings@109,4> [label=Name]
	"PythonNode(atom_expr, [<Name":" warnings@109,4>, PythonNode(trailer, [<Operator": .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]) -> "<Name":" warnings@109,4>"
	"PythonNode(trailer, [<Operator: .>, <Name: warn@109,13>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" warnings@109,4>, PythonNode(trailer, [<Operator": .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": warn@109,13>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": warn@109,13>]) -> "<Operator":" .>"
	<Name: warn@109,13> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": warn@109,13>]) -> "<Name":" warn@109,13>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String: \"version!\">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" warnings@109,4>, PythonNode(trailer, [<Operator": .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String": "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String": "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String: \"version!\">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String": "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>]) -> "PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>])
	"PythonNode(atom_expr, [PythonNode(strings, [<String: \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String: \"version!\">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])])" [label=PythonNode]
	"PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]) -> "PythonNode(atom_expr, [PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])])
	"PythonNode(strings, [<String: \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String: \"version!\">])" [label=PythonNode]
	"PythonNode(atom_expr, [PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]) -> "PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">])
	<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported "> [label=String]
	"PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]) -> "<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">"
	<String: "version!"> [label=String]
	"PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]) -> "<String":" \"version!\">"
	"PythonNode(trailer, [<Operator: .>, <Name: format@111,19>])" [label=PythonNode]
	"PythonNode(atom_expr, [PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": format@111,19>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": format@111,19>]) -> "<Operator":" .>"
	<Name: format@111,19> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": format@111,19>]) -> "<Name":" format@111,19>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name": urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name": urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name": urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>]) -> "PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@112,12>, PythonNode(trailer, [<Operator": .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>])
	"PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])])" [label=PythonNode]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@112,12>, PythonNode(trailer, [<Operator": .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]) -> "PythonNode(atom_expr, [<Name":" urllib3@112,12>, PythonNode(trailer, [<Operator": .>, <Name: __version__@112,20>])])
	<Name: urllib3@112,12> [label=Name]
	"PythonNode(atom_expr, [<Name":" urllib3@112,12>, PythonNode(trailer, [<Operator": .>, <Name: __version__@112,20>])]) -> "<Name":" urllib3@112,12>"
	"PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" urllib3@112,12>, PythonNode(trailer, [<Operator": .>, <Name: __version__@112,20>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": __version__@112,20>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": __version__@112,20>]) -> "<Operator":" .>"
	<Name: __version__@112,20> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": __version__@112,20>]) -> "<Name":" __version__@112,20>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@112,12>, PythonNode(trailer, [<Operator": .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]) -> "<Operator":" ,>"
	<Name: chardet_version@112,33> [label=Name]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@112,12>, PythonNode(trailer, [<Operator": .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]) -> "<Name":" chardet_version@112,33>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@112,12>, PythonNode(trailer, [<Operator": .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]) -> "<Operator":" ,>"
	<Name: charset_normalizer_version@112,50> [label=Name]
	"PythonNode(arglist, [PythonNode(atom_expr, [<Name":" urllib3@112,12>, PythonNode(trailer, [<Operator": .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]) -> "<Name":" charset_normalizer_version@112,50>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name": urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>]) -> "<Operator":" )>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: RequestsDependencyWarning@114,8> [label=Name]
	"PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]) -> "<Name":" RequestsDependencyWarning@114,8>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String":" \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \">, <String": "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]) -> "<Operator":" ,>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String": "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@109,4>, PythonNode(trailer, [<Operator": .>, <Name: warn@109,13>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [PythonNode(strings, [<String: "urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported ">, <String: "version!">]), PythonNode(trailer, [<Operator: .>, <Name: format@111,19>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [PythonNode(atom_expr, [<Name: urllib3@112,12>, PythonNode(trailer, [<Operator: .>, <Name: __version__@112,20>])]), <Operator: ,>, <Name: chardet_version@112,33>, <Operator: ,>, <Name: charset_normalizer_version@112,50>]), <Operator: )>])]), <Operator: ,>, <Name: RequestsDependencyWarning@114,8>, <Operator: ,>]), <Operator: )>])]), <Newline: '\n'>]) -> "<Newline":" '\n'>"
	<TryStmt: # Attempt to enable urllib3's fallback for SNI support # if the standard library doesn't support SNI or the # 'ssl' library isn't available. try:     try:         import ssl     except ImportError:         ssl = None      if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version) except ImportError:     pass@120,0> [label=TryStmt]
	"<Module":" @6-181>" -> "<TryStmt":" # Attempt to enable urllib3's fallback for SNI support # if the standard library doesn't support SNI or the # 'ssl' library isn't available. try":     try:         import ssl     except ImportError:         ssl = None      if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version) except ImportError:     pass@120,0>
	<Keyword: try> [label=Keyword]
	"<TryStmt":" # Attempt to enable urllib3's fallback for SNI support # if the standard library doesn't support SNI or the # 'ssl' library isn't available. try":     try:         import ssl     except ImportError:         ssl = None      if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version) except ImportError:     pass@120,0> -> "<Keyword":" try>"
	<Operator: :> [label=Operator]
	"<TryStmt":" # Attempt to enable urllib3's fallback for SNI support # if the standard library doesn't support SNI or the # 'ssl' library isn't available. try":     try:         import ssl     except ImportError:         ssl = None      if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version) except ImportError:     pass@120,0> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, <TryStmt: try:         import ssl     except ImportError:         ssl = None@121,4>, <IfStmt: if not getattr(ssl, \"HAS_SNI\", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4>])" [label=PythonNode]
	"<TryStmt":" # Attempt to enable urllib3's fallback for SNI support # if the standard library doesn't support SNI or the # 'ssl' library isn't available. try":     try:         import ssl     except ImportError:         ssl = None      if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version) except ImportError:     pass@120,0> -> "PythonNode(suite, [<Newline":" '\n'>, <TryStmt": try:         import ssl     except ImportError:         ssl = None@121,4>, <IfStmt: if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4>])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, <TryStmt": try:         import ssl     except ImportError:         ssl = None@121,4>, <IfStmt: if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4>]) -> "<Newline":" '\n'>"
	<TryStmt: try:         import ssl     except ImportError:         ssl = None@121,4> [label=TryStmt]
	"PythonNode(suite, [<Newline":" '\n'>, <TryStmt": try:         import ssl     except ImportError:         ssl = None@121,4>, <IfStmt: if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4>]) -> "<TryStmt":" try":         import ssl     except ImportError:         ssl = None@121,4>
	<Keyword: try> [label=Keyword]
	"<TryStmt":" try":         import ssl     except ImportError:         ssl = None@121,4> -> "<Keyword":" try>"
	<Operator: :> [label=Operator]
	"<TryStmt":" try":         import ssl     except ImportError:         ssl = None@121,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ImportName: import ssl@122,8>, <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" try":         import ssl     except ImportError:         ssl = None@121,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportName": import ssl@122,8>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportName": import ssl@122,8>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportName: import ssl@122,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportName": import ssl@122,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ImportName":" import ssl@122,8>, <Newline": '\n'>])
	<ImportName: import ssl@122,8> [label=ImportName]
	"PythonNode(simple_stmt, [<ImportName":" import ssl@122,8>, <Newline": '\n'>]) -> "<ImportName":" import ssl@122,8>"
	<Keyword: import> [label=Keyword]
	"<ImportName":" import ssl@122,8>" -> "<Keyword":" import>"
	<Name: ssl@122,15> [label=Name]
	"<ImportName":" import ssl@122,8>" -> "<Name":" ssl@122,15>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportName":" import ssl@122,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(except_clause, [<Keyword: except>, <Name: ImportError@123,11>])" [label=PythonNode]
	"<TryStmt":" try":         import ssl     except ImportError:         ssl = None@121,4> -> "PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@123,11>])
	<Keyword: except> [label=Keyword]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@123,11>]) -> "<Keyword":" except>"
	<Name: ImportError@123,11> [label=Name]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@123,11>]) -> "<Name":" ImportError@123,11>"
	<Operator: :> [label=Operator]
	"<TryStmt":" try":         import ssl     except ImportError:         ssl = None@121,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ExprStmt: ssl = None@124,8>, <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" try":         import ssl     except ImportError:         ssl = None@121,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": ssl = None@124,8>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": ssl = None@124,8>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ExprStmt: ssl = None@124,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ExprStmt": ssl = None@124,8>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ExprStmt":" ssl = None@124,8>, <Newline": '\n'>])
	<ExprStmt: ssl = None@124,8> [label=ExprStmt]
	"PythonNode(simple_stmt, [<ExprStmt":" ssl = None@124,8>, <Newline": '\n'>]) -> "<ExprStmt":" ssl = None@124,8>"
	<Name: ssl@124,8> [label=Name]
	"<ExprStmt":" ssl = None@124,8>" -> "<Name":" ssl@124,8>"
	<Operator: => [label=Operator]
	"<ExprStmt":" ssl = None@124,8>" -> "<Operator":" =>"
	<Keyword: None> [label=Keyword]
	"<ExprStmt":" ssl = None@124,8>" -> "<Keyword":" None>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ExprStmt":" ssl = None@124,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	<IfStmt: if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4> [label=IfStmt]
	"PythonNode(suite, [<Newline":" '\n'>, <TryStmt": try:         import ssl     except ImportError:         ssl = None@121,4>, <IfStmt: if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4>]) -> "<IfStmt":" if not getattr(ssl, \"HAS_SNI\", False)":         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4>
	<Keyword: if> [label=Keyword]
	"<IfStmt":" if not getattr(ssl, \"HAS_SNI\", False)":         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4> -> "<Keyword":" if>"
	"PythonNode(not_test, [<Keyword: not>, PythonNode(atom_expr, [<Name: getattr@126,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: \"HAS_SNI\">, <Operator: ,>, <Keyword: False>]), <Operator: )>])])])" [label=PythonNode]
	"<IfStmt":" if not getattr(ssl, \"HAS_SNI\", False)":         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4> -> "PythonNode(not_test, [<Keyword":" not>, PythonNode(atom_expr, [<Name": getattr@126,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>])])])
	<Keyword: not> [label=Keyword]
	"PythonNode(not_test, [<Keyword":" not>, PythonNode(atom_expr, [<Name": getattr@126,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>])])]) -> "<Keyword":" not>"
	"PythonNode(atom_expr, [<Name: getattr@126,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: \"HAS_SNI\">, <Operator: ,>, <Keyword: False>]), <Operator: )>])])" [label=PythonNode]
	"PythonNode(not_test, [<Keyword":" not>, PythonNode(atom_expr, [<Name": getattr@126,11>, PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>])])]) -> "PythonNode(atom_expr, [<Name":" getattr@126,11>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>])])
	<Name: getattr@126,11> [label=Name]
	"PythonNode(atom_expr, [<Name":" getattr@126,11>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>])]) -> "<Name":" getattr@126,11>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: \"HAS_SNI\">, <Operator: ,>, <Keyword: False>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" getattr@126,11>, PythonNode(trailer, [<Operator": (>, PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(arglist, [<Name: ssl@126,19>, <Operator: ,>, <String: \"HAS_SNI\">, <Operator: ,>, <Keyword: False>])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>]) -> "PythonNode(arglist, [<Name":" ssl@126,19>, <Operator": ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>])
	<Name: ssl@126,19> [label=Name]
	"PythonNode(arglist, [<Name":" ssl@126,19>, <Operator": ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]) -> "<Name":" ssl@126,19>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [<Name":" ssl@126,19>, <Operator": ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]) -> "<Operator":" ,>"
	<String: "HAS_SNI"> [label=String]
	"PythonNode(arglist, [<Name":" ssl@126,19>, <Operator": ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]) -> "<String":" \"HAS_SNI\">"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [<Name":" ssl@126,19>, <Operator": ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]) -> "<Operator":" ,>"
	<Keyword: False> [label=Keyword]
	"PythonNode(arglist, [<Name":" ssl@126,19>, <Operator": ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]) -> "<Keyword":" False>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<Name": ssl@126,19>, <Operator: ,>, <String: "HAS_SNI">, <Operator: ,>, <Keyword: False>]), <Operator: )>]) -> "<Operator":" )>"
	<Operator: :> [label=Operator]
	"<IfStmt":" if not getattr(ssl, \"HAS_SNI\", False)":         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<ImportFrom: from urllib3.contrib import pyopenssl@127,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: pyopenssl@129,8>, PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>]), PythonNode(simple_stmt, [<ImportFrom: # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: _check_cryptography@134,8>, PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>])])" [label=PythonNode]
	"<IfStmt":" if not getattr(ssl, \"HAS_SNI\", False)":         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version)@126,4> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from urllib3.contrib import pyopenssl@127,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: pyopenssl@129,8>, PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>]), PythonNode(simple_stmt, [<ImportFrom: # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: _check_cryptography@134,8>, PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from urllib3.contrib import pyopenssl@127,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: pyopenssl@129,8>, PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>]), PythonNode(simple_stmt, [<ImportFrom: # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: _check_cryptography@134,8>, PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from urllib3.contrib import pyopenssl@127,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from urllib3.contrib import pyopenssl@127,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: pyopenssl@129,8>, PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>]), PythonNode(simple_stmt, [<ImportFrom: # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: _check_cryptography@134,8>, PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ImportFrom":" from urllib3.contrib import pyopenssl@127,8>, <Newline": '\n'>])
	<ImportFrom: from urllib3.contrib import pyopenssl@127,8> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from urllib3.contrib import pyopenssl@127,8>, <Newline": '\n'>]) -> "<ImportFrom":" from urllib3.contrib import pyopenssl@127,8>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from urllib3.contrib import pyopenssl@127,8>" -> "<Keyword":" from>"
	"PythonNode(dotted_name, [<Name: urllib3@127,13>, <Operator: .>, <Name: contrib@127,21>])" [label=PythonNode]
	"<ImportFrom":" from urllib3.contrib import pyopenssl@127,8>" -> "PythonNode(dotted_name, [<Name":" urllib3@127,13>, <Operator": .>, <Name: contrib@127,21>])
	<Name: urllib3@127,13> [label=Name]
	"PythonNode(dotted_name, [<Name":" urllib3@127,13>, <Operator": .>, <Name: contrib@127,21>]) -> "<Name":" urllib3@127,13>"
	<Operator: .> [label=Operator]
	"PythonNode(dotted_name, [<Name":" urllib3@127,13>, <Operator": .>, <Name: contrib@127,21>]) -> "<Operator":" .>"
	<Name: contrib@127,21> [label=Name]
	"PythonNode(dotted_name, [<Name":" urllib3@127,13>, <Operator": .>, <Name: contrib@127,21>]) -> "<Name":" contrib@127,21>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from urllib3.contrib import pyopenssl@127,8>" -> "<Keyword":" import>"
	<Name: pyopenssl@127,36> [label=Name]
	"<ImportFrom":" from urllib3.contrib import pyopenssl@127,8>" -> "<Name":" pyopenssl@127,36>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from urllib3.contrib import pyopenssl@127,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: pyopenssl@129,8>, PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from urllib3.contrib import pyopenssl@127,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: pyopenssl@129,8>, PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>]), PythonNode(simple_stmt, [<ImportFrom: # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: _check_cryptography@134,8>, PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" pyopenssl@129,8>, PythonNode(trailer, [<Operator": .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>])
	"PythonNode(atom_expr, [<Name: pyopenssl@129,8>, PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" pyopenssl@129,8>, PythonNode(trailer, [<Operator": .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>]) -> "PythonNode(atom_expr, [<Name":" pyopenssl@129,8>, PythonNode(trailer, [<Operator": .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])])
	<Name: pyopenssl@129,8> [label=Name]
	"PythonNode(atom_expr, [<Name":" pyopenssl@129,8>, PythonNode(trailer, [<Operator": .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]) -> "<Name":" pyopenssl@129,8>"
	"PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" pyopenssl@129,8>, PythonNode(trailer, [<Operator": .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": inject_into_urllib3@129,18>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": inject_into_urllib3@129,18>]) -> "<Operator":" .>"
	<Name: inject_into_urllib3@129,18> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": inject_into_urllib3@129,18>]) -> "<Name":" inject_into_urllib3@129,18>"
	"PythonNode(trailer, [<Operator: (>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" pyopenssl@129,8>, PythonNode(trailer, [<Operator": .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Operator": )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Operator": )>]) -> "<Operator":" (>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Operator": )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" pyopenssl@129,8>, PythonNode(trailer, [<Operator": .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from urllib3.contrib import pyopenssl@127,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: pyopenssl@129,8>, PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>]), PythonNode(simple_stmt, [<ImportFrom: # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: _check_cryptography@134,8>, PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<ImportFrom":" # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline": '\n'>])
	<ImportFrom: # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline": '\n'>]) -> "<ImportFrom":" # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>" -> "<Keyword":" from>"
	<Name: cryptography@132,13> [label=Name]
	"<ImportFrom":" # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>" -> "<Name":" cryptography@132,13>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>" -> "<Keyword":" import>"
	"PythonNode(import_as_name, [<Name: __version__@132,33>, <Keyword: as>, <Name: cryptography_version@132,48>])" [label=PythonNode]
	"<ImportFrom":" # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>" -> "PythonNode(import_as_name, [<Name":" __version__@132,33>, <Keyword": as>, <Name: cryptography_version@132,48>])
	<Name: __version__@132,33> [label=Name]
	"PythonNode(import_as_name, [<Name":" __version__@132,33>, <Keyword": as>, <Name: cryptography_version@132,48>]) -> "<Name":" __version__@132,33>"
	<Keyword: as> [label=Keyword]
	"PythonNode(import_as_name, [<Name":" __version__@132,33>, <Keyword": as>, <Name: cryptography_version@132,48>]) -> "<Keyword":" as>"
	<Name: cryptography_version@132,48> [label=Name]
	"PythonNode(import_as_name, [<Name":" __version__@132,33>, <Keyword": as>, <Name: cryptography_version@132,48>]) -> "<Name":" cryptography_version@132,48>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: _check_cryptography@134,8>, PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<ImportFrom": from urllib3.contrib import pyopenssl@127,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: pyopenssl@129,8>, PythonNode(trailer, [<Operator: .>, <Name: inject_into_urllib3@129,18>]), PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Newline: '\n'>]), PythonNode(simple_stmt, [<ImportFrom: # Check cryptography version         from cryptography import __version__ as cryptography_version@132,8>, <Newline: '\n'>]), PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: _check_cryptography@134,8>, PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" _check_cryptography@134,8>, PythonNode(trailer, [<Operator": (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>])
	"PythonNode(atom_expr, [<Name: _check_cryptography@134,8>, PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" _check_cryptography@134,8>, PythonNode(trailer, [<Operator": (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>]) -> "PythonNode(atom_expr, [<Name":" _check_cryptography@134,8>, PythonNode(trailer, [<Operator": (>, <Name: cryptography_version@134,28>, <Operator: )>])])
	<Name: _check_cryptography@134,8> [label=Name]
	"PythonNode(atom_expr, [<Name":" _check_cryptography@134,8>, PythonNode(trailer, [<Operator": (>, <Name: cryptography_version@134,28>, <Operator: )>])]) -> "<Name":" _check_cryptography@134,8>"
	"PythonNode(trailer, [<Operator: (>, <Name: cryptography_version@134,28>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" _check_cryptography@134,8>, PythonNode(trailer, [<Operator": (>, <Name: cryptography_version@134,28>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": cryptography_version@134,28>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": cryptography_version@134,28>, <Operator: )>]) -> "<Operator":" (>"
	<Name: cryptography_version@134,28> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": cryptography_version@134,28>, <Operator: )>]) -> "<Name":" cryptography_version@134,28>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": cryptography_version@134,28>, <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" _check_cryptography@134,8>, PythonNode(trailer, [<Operator": (>, <Name: cryptography_version@134,28>, <Operator: )>])]), <Newline: '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(except_clause, [<Keyword: except>, <Name: ImportError@135,7>])" [label=PythonNode]
	"<TryStmt":" # Attempt to enable urllib3's fallback for SNI support # if the standard library doesn't support SNI or the # 'ssl' library isn't available. try":     try:         import ssl     except ImportError:         ssl = None      if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version) except ImportError:     pass@120,0> -> "PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@135,7>])
	<Keyword: except> [label=Keyword]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@135,7>]) -> "<Keyword":" except>"
	<Name: ImportError@135,7> [label=Name]
	"PythonNode(except_clause, [<Keyword":" except>, <Name": ImportError@135,7>]) -> "<Name":" ImportError@135,7>"
	<Operator: :> [label=Operator]
	"<TryStmt":" # Attempt to enable urllib3's fallback for SNI support # if the standard library doesn't support SNI or the # 'ssl' library isn't available. try":     try:         import ssl     except ImportError:         ssl = None      if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version) except ImportError:     pass@120,0> -> "<Operator":" ":>
	"PythonNode(suite, [<Newline: '\n'>, PythonNode(simple_stmt, [<Keyword: pass>, <Newline: '\n'>])])" [label=PythonNode]
	"<TryStmt":" # Attempt to enable urllib3's fallback for SNI support # if the standard library doesn't support SNI or the # 'ssl' library isn't available. try":     try:         import ssl     except ImportError:         ssl = None      if not getattr(ssl, "HAS_SNI", False):         from urllib3.contrib import pyopenssl          pyopenssl.inject_into_urllib3()          # Check cryptography version         from cryptography import __version__ as cryptography_version          _check_cryptography(cryptography_version) except ImportError:     pass@120,0> -> "PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<Keyword": pass>, <Newline: '\n'>])])
	<Newline: '\n'> [label=Newline]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<Keyword": pass>, <Newline: '\n'>])]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<Keyword: pass>, <Newline: '\n'>])" [label=PythonNode]
	"PythonNode(suite, [<Newline":" '\n'>, PythonNode(simple_stmt, [<Keyword": pass>, <Newline: '\n'>])]) -> "PythonNode(simple_stmt, [<Keyword":" pass>, <Newline": '\n'>])
	<Keyword: pass> [label=Keyword]
	"PythonNode(simple_stmt, [<Keyword":" pass>, <Newline": '\n'>]) -> "<Keyword":" pass>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<Keyword":" pass>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0>, <Newline": '\n'>])
	<ImportFrom: # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0>, <Newline": '\n'>]) -> "<ImportFrom":" # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0>" -> "<Keyword":" from>"
	"PythonNode(dotted_name, [<Name: urllib3@139,5>, <Operator: .>, <Name: exceptions@139,13>])" [label=PythonNode]
	"<ImportFrom":" # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0>" -> "PythonNode(dotted_name, [<Name":" urllib3@139,5>, <Operator": .>, <Name: exceptions@139,13>])
	<Name: urllib3@139,5> [label=Name]
	"PythonNode(dotted_name, [<Name":" urllib3@139,5>, <Operator": .>, <Name: exceptions@139,13>]) -> "<Name":" urllib3@139,5>"
	<Operator: .> [label=Operator]
	"PythonNode(dotted_name, [<Name":" urllib3@139,5>, <Operator": .>, <Name: exceptions@139,13>]) -> "<Operator":" .>"
	<Name: exceptions@139,13> [label=Name]
	"PythonNode(dotted_name, [<Name":" urllib3@139,5>, <Operator": .>, <Name: exceptions@139,13>]) -> "<Name":" exceptions@139,13>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0>" -> "<Keyword":" import>"
	<Name: DependencyWarning@139,31> [label=Name]
	"<ImportFrom":" # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0>" -> "<Name":" DependencyWarning@139,31>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" # urllib3's DependencyWarnings should be silenced. from urllib3.exceptions import DependencyWarning@139,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@141,0>, PythonNode(trailer, [<Operator: .>, <Name: simplefilter@141,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: \"ignore\">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])]), <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@141,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@141,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])]), <Newline: '\n'>])
	"PythonNode(atom_expr, [<Name: warnings@141,0>, PythonNode(trailer, [<Operator: .>, <Name: simplefilter@141,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: \"ignore\">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])])" [label=PythonNode]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@141,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@141,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])]), <Newline: '\n'>]) -> "PythonNode(atom_expr, [<Name":" warnings@141,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@141,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])])
	<Name: warnings@141,0> [label=Name]
	"PythonNode(atom_expr, [<Name":" warnings@141,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@141,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])]) -> "<Name":" warnings@141,0>"
	"PythonNode(trailer, [<Operator: .>, <Name: simplefilter@141,9>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" warnings@141,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@141,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": simplefilter@141,9>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": simplefilter@141,9>]) -> "<Operator":" .>"
	<Name: simplefilter@141,9> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": simplefilter@141,9>]) -> "<Name":" simplefilter@141,9>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: \"ignore\">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" warnings@141,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@141,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<String": "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<String": "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(arglist, [<String: \"ignore\">, <Operator: ,>, <Name: DependencyWarning@141,32>])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<String": "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>]) -> "PythonNode(arglist, [<String":" \"ignore\">, <Operator": ,>, <Name: DependencyWarning@141,32>])
	<String: "ignore"> [label=String]
	"PythonNode(arglist, [<String":" \"ignore\">, <Operator": ,>, <Name: DependencyWarning@141,32>]) -> "<String":" \"ignore\">"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [<String":" \"ignore\">, <Operator": ,>, <Name: DependencyWarning@141,32>]) -> "<Operator":" ,>"
	<Name: DependencyWarning@141,32> [label=Name]
	"PythonNode(arglist, [<String":" \"ignore\">, <Operator": ,>, <Name: DependencyWarning@141,32>]) -> "<Name":" DependencyWarning@141,32>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<String": "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@141,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@141,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "ignore">, <Operator: ,>, <Name: DependencyWarning@141,32>]), <Operator: )>])]), <Newline: '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportName: # Set default logging handler to avoid \"No handler found\" warnings. import logging@144,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportName":" # Set default logging handler to avoid \"No handler found\" warnings. import logging@144,0>, <Newline": '\n'>])
	<ImportName: # Set default logging handler to avoid "No handler found" warnings. import logging@144,0> [label=ImportName]
	"PythonNode(simple_stmt, [<ImportName":" # Set default logging handler to avoid \"No handler found\" warnings. import logging@144,0>, <Newline": '\n'>]) -> "<ImportName":" # Set default logging handler to avoid \"No handler found\" warnings. import logging@144,0>"
	<Keyword: import> [label=Keyword]
	"<ImportName":" # Set default logging handler to avoid \"No handler found\" warnings. import logging@144,0>" -> "<Keyword":" import>"
	<Name: logging@144,7> [label=Name]
	"<ImportName":" # Set default logging handler to avoid \"No handler found\" warnings. import logging@144,0>" -> "<Name":" logging@144,7>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportName":" # Set default logging handler to avoid \"No handler found\" warnings. import logging@144,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from logging import NullHandler@145,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" from logging import NullHandler@145,0>, <Newline": '\n'>])
	<ImportFrom: from logging import NullHandler@145,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from logging import NullHandler@145,0>, <Newline": '\n'>]) -> "<ImportFrom":" from logging import NullHandler@145,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from logging import NullHandler@145,0>" -> "<Keyword":" from>"
	<Name: logging@145,5> [label=Name]
	"<ImportFrom":" from logging import NullHandler@145,0>" -> "<Name":" logging@145,5>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from logging import NullHandler@145,0>" -> "<Keyword":" import>"
	<Name: NullHandler@145,20> [label=Name]
	"<ImportFrom":" from logging import NullHandler@145,0>" -> "<Name":" NullHandler@145,20>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from logging import NullHandler@145,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from . import packages, utils@147,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" from . import packages, utils@147,0>, <Newline": '\n'>])
	<ImportFrom: from . import packages, utils@147,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from . import packages, utils@147,0>, <Newline": '\n'>]) -> "<ImportFrom":" from . import packages, utils@147,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from . import packages, utils@147,0>" -> "<Keyword":" from>"
	<Operator: .> [label=Operator]
	"<ImportFrom":" from . import packages, utils@147,0>" -> "<Operator":" .>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from . import packages, utils@147,0>" -> "<Keyword":" import>"
	"PythonNode(import_as_names, [<Name: packages@147,14>, <Operator: ,>, <Name: utils@147,24>])" [label=PythonNode]
	"<ImportFrom":" from . import packages, utils@147,0>" -> "PythonNode(import_as_names, [<Name":" packages@147,14>, <Operator": ,>, <Name: utils@147,24>])
	<Name: packages@147,14> [label=Name]
	"PythonNode(import_as_names, [<Name":" packages@147,14>, <Operator": ,>, <Name: utils@147,24>]) -> "<Name":" packages@147,14>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" packages@147,14>, <Operator": ,>, <Name: utils@147,24>]) -> "<Operator":" ,>"
	<Name: utils@147,24> [label=Name]
	"PythonNode(import_as_names, [<Name":" packages@147,14>, <Operator": ,>, <Name: utils@147,24>]) -> "<Name":" utils@147,24>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from . import packages, utils@147,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>, <Newline": '\n'>])
	<ImportFrom: from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>, <Newline": '\n'>]) -> "<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>" -> "<Keyword":" from>"
	<Operator: .> [label=Operator]
	"<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>" -> "<Operator":" .>"
	<Name: __version__@148,6> [label=Name]
	"<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>" -> "<Name":" __version__@148,6>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>" -> "<Keyword":" import>"
	<Operator: (> [label=Operator]
	"<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>" -> "<Operator":" (>"
	"PythonNode(import_as_names, [<Name: __author__@149,4>, <Operator: ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>])" [label=PythonNode]
	"<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>" -> "PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>])
	<Name: __author__@149,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __author__@149,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: __author_email__@150,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __author_email__@150,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: __build__@151,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __build__@151,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: __cake__@152,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __cake__@152,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: __copyright__@153,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __copyright__@153,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: __description__@154,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __description__@154,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: __license__@155,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __license__@155,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: __title__@156,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __title__@156,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: __url__@157,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __url__@157,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: __version__@158,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Name":" __version__@158,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" __author__@149,4>, <Operator": ,>, <Name: __author_email__@150,4>, <Operator: ,>, <Name: __build__@151,4>, <Operator: ,>, <Name: __cake__@152,4>, <Operator: ,>, <Name: __copyright__@153,4>, <Operator: ,>, <Name: __description__@154,4>, <Operator: ,>, <Name: __license__@155,4>, <Operator: ,>, <Name: __title__@156,4>, <Operator: ,>, <Name: __url__@157,4>, <Operator: ,>, <Name: __version__@158,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Operator: )> [label=Operator]
	"<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>" -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from .__version__ import (     __author__,     __author_email__,     __build__,     __cake__,     __copyright__,     __description__,     __license__,     __title__,     __url__,     __version__, )@148,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from .api import delete, get, head, options, patch, post, put, request@160,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" from .api import delete, get, head, options, patch, post, put, request@160,0>, <Newline": '\n'>])
	<ImportFrom: from .api import delete, get, head, options, patch, post, put, request@160,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from .api import delete, get, head, options, patch, post, put, request@160,0>, <Newline": '\n'>]) -> "<ImportFrom":" from .api import delete, get, head, options, patch, post, put, request@160,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from .api import delete, get, head, options, patch, post, put, request@160,0>" -> "<Keyword":" from>"
	<Operator: .> [label=Operator]
	"<ImportFrom":" from .api import delete, get, head, options, patch, post, put, request@160,0>" -> "<Operator":" .>"
	<Name: api@160,6> [label=Name]
	"<ImportFrom":" from .api import delete, get, head, options, patch, post, put, request@160,0>" -> "<Name":" api@160,6>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from .api import delete, get, head, options, patch, post, put, request@160,0>" -> "<Keyword":" import>"
	"PythonNode(import_as_names, [<Name: delete@160,17>, <Operator: ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>])" [label=PythonNode]
	"<ImportFrom":" from .api import delete, get, head, options, patch, post, put, request@160,0>" -> "PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>])
	<Name: delete@160,17> [label=Name]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Name":" delete@160,17>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Operator":" ,>"
	<Name: get@160,25> [label=Name]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Name":" get@160,25>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Operator":" ,>"
	<Name: head@160,30> [label=Name]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Name":" head@160,30>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Operator":" ,>"
	<Name: options@160,36> [label=Name]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Name":" options@160,36>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Operator":" ,>"
	<Name: patch@160,45> [label=Name]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Name":" patch@160,45>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Operator":" ,>"
	<Name: post@160,52> [label=Name]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Name":" post@160,52>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Operator":" ,>"
	<Name: put@160,58> [label=Name]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Name":" put@160,58>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Operator":" ,>"
	<Name: request@160,63> [label=Name]
	"PythonNode(import_as_names, [<Name":" delete@160,17>, <Operator": ,>, <Name: get@160,25>, <Operator: ,>, <Name: head@160,30>, <Operator: ,>, <Name: options@160,36>, <Operator: ,>, <Name: patch@160,45>, <Operator: ,>, <Name: post@160,52>, <Operator: ,>, <Name: put@160,58>, <Operator: ,>, <Name: request@160,63>]) -> "<Name":" request@160,63>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from .api import delete, get, head, options, patch, post, put, request@160,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>, <Newline": '\n'>])
	<ImportFrom: from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>, <Newline": '\n'>]) -> "<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>" -> "<Keyword":" from>"
	<Operator: .> [label=Operator]
	"<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>" -> "<Operator":" .>"
	<Name: exceptions@161,6> [label=Name]
	"<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>" -> "<Name":" exceptions@161,6>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>" -> "<Keyword":" import>"
	<Operator: (> [label=Operator]
	"<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>" -> "<Operator":" (>"
	"PythonNode(import_as_names, [<Name: ConnectionError@162,4>, <Operator: ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>])" [label=PythonNode]
	"<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>" -> "PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>])
	<Name: ConnectionError@162,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" ConnectionError@162,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: ConnectTimeout@163,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" ConnectTimeout@163,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: FileModeWarning@164,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" FileModeWarning@164,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: HTTPError@165,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" HTTPError@165,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: JSONDecodeError@166,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" JSONDecodeError@166,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: ReadTimeout@167,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" ReadTimeout@167,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: RequestException@168,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" RequestException@168,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: Timeout@169,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" Timeout@169,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: TooManyRedirects@170,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" TooManyRedirects@170,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Name: URLRequired@171,4> [label=Name]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Name":" URLRequired@171,4>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" ConnectionError@162,4>, <Operator": ,>, <Name: ConnectTimeout@163,4>, <Operator: ,>, <Name: FileModeWarning@164,4>, <Operator: ,>, <Name: HTTPError@165,4>, <Operator: ,>, <Name: JSONDecodeError@166,4>, <Operator: ,>, <Name: ReadTimeout@167,4>, <Operator: ,>, <Name: RequestException@168,4>, <Operator: ,>, <Name: Timeout@169,4>, <Operator: ,>, <Name: TooManyRedirects@170,4>, <Operator: ,>, <Name: URLRequired@171,4>, <Operator: ,>]) -> "<Operator":" ,>"
	<Operator: )> [label=Operator]
	"<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>" -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from .exceptions import (     ConnectionError,     ConnectTimeout,     FileModeWarning,     HTTPError,     JSONDecodeError,     ReadTimeout,     RequestException,     Timeout,     TooManyRedirects,     URLRequired, )@161,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from .models import PreparedRequest, Request, Response@173,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" from .models import PreparedRequest, Request, Response@173,0>, <Newline": '\n'>])
	<ImportFrom: from .models import PreparedRequest, Request, Response@173,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from .models import PreparedRequest, Request, Response@173,0>, <Newline": '\n'>]) -> "<ImportFrom":" from .models import PreparedRequest, Request, Response@173,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from .models import PreparedRequest, Request, Response@173,0>" -> "<Keyword":" from>"
	<Operator: .> [label=Operator]
	"<ImportFrom":" from .models import PreparedRequest, Request, Response@173,0>" -> "<Operator":" .>"
	<Name: models@173,6> [label=Name]
	"<ImportFrom":" from .models import PreparedRequest, Request, Response@173,0>" -> "<Name":" models@173,6>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from .models import PreparedRequest, Request, Response@173,0>" -> "<Keyword":" import>"
	"PythonNode(import_as_names, [<Name: PreparedRequest@173,20>, <Operator: ,>, <Name: Request@173,37>, <Operator: ,>, <Name: Response@173,46>])" [label=PythonNode]
	"<ImportFrom":" from .models import PreparedRequest, Request, Response@173,0>" -> "PythonNode(import_as_names, [<Name":" PreparedRequest@173,20>, <Operator": ,>, <Name: Request@173,37>, <Operator: ,>, <Name: Response@173,46>])
	<Name: PreparedRequest@173,20> [label=Name]
	"PythonNode(import_as_names, [<Name":" PreparedRequest@173,20>, <Operator": ,>, <Name: Request@173,37>, <Operator: ,>, <Name: Response@173,46>]) -> "<Name":" PreparedRequest@173,20>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" PreparedRequest@173,20>, <Operator": ,>, <Name: Request@173,37>, <Operator: ,>, <Name: Response@173,46>]) -> "<Operator":" ,>"
	<Name: Request@173,37> [label=Name]
	"PythonNode(import_as_names, [<Name":" PreparedRequest@173,20>, <Operator": ,>, <Name: Request@173,37>, <Operator: ,>, <Name: Response@173,46>]) -> "<Name":" Request@173,37>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" PreparedRequest@173,20>, <Operator": ,>, <Name: Request@173,37>, <Operator: ,>, <Name: Response@173,46>]) -> "<Operator":" ,>"
	<Name: Response@173,46> [label=Name]
	"PythonNode(import_as_names, [<Name":" PreparedRequest@173,20>, <Operator": ,>, <Name: Request@173,37>, <Operator: ,>, <Name: Response@173,46>]) -> "<Name":" Response@173,46>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from .models import PreparedRequest, Request, Response@173,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from .sessions import Session, session@174,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" from .sessions import Session, session@174,0>, <Newline": '\n'>])
	<ImportFrom: from .sessions import Session, session@174,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from .sessions import Session, session@174,0>, <Newline": '\n'>]) -> "<ImportFrom":" from .sessions import Session, session@174,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from .sessions import Session, session@174,0>" -> "<Keyword":" from>"
	<Operator: .> [label=Operator]
	"<ImportFrom":" from .sessions import Session, session@174,0>" -> "<Operator":" .>"
	<Name: sessions@174,6> [label=Name]
	"<ImportFrom":" from .sessions import Session, session@174,0>" -> "<Name":" sessions@174,6>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from .sessions import Session, session@174,0>" -> "<Keyword":" import>"
	"PythonNode(import_as_names, [<Name: Session@174,22>, <Operator: ,>, <Name: session@174,31>])" [label=PythonNode]
	"<ImportFrom":" from .sessions import Session, session@174,0>" -> "PythonNode(import_as_names, [<Name":" Session@174,22>, <Operator": ,>, <Name: session@174,31>])
	<Name: Session@174,22> [label=Name]
	"PythonNode(import_as_names, [<Name":" Session@174,22>, <Operator": ,>, <Name: session@174,31>]) -> "<Name":" Session@174,22>"
	<Operator: ,> [label=Operator]
	"PythonNode(import_as_names, [<Name":" Session@174,22>, <Operator": ,>, <Name: session@174,31>]) -> "<Operator":" ,>"
	<Name: session@174,31> [label=Name]
	"PythonNode(import_as_names, [<Name":" Session@174,22>, <Operator": ,>, <Name: session@174,31>]) -> "<Name":" session@174,31>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from .sessions import Session, session@174,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [<ImportFrom: from .status_codes import codes@175,0>, <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [<ImportFrom":" from .status_codes import codes@175,0>, <Newline": '\n'>])
	<ImportFrom: from .status_codes import codes@175,0> [label=ImportFrom]
	"PythonNode(simple_stmt, [<ImportFrom":" from .status_codes import codes@175,0>, <Newline": '\n'>]) -> "<ImportFrom":" from .status_codes import codes@175,0>"
	<Keyword: from> [label=Keyword]
	"<ImportFrom":" from .status_codes import codes@175,0>" -> "<Keyword":" from>"
	<Operator: .> [label=Operator]
	"<ImportFrom":" from .status_codes import codes@175,0>" -> "<Operator":" .>"
	<Name: status_codes@175,6> [label=Name]
	"<ImportFrom":" from .status_codes import codes@175,0>" -> "<Name":" status_codes@175,6>"
	<Keyword: import> [label=Keyword]
	"<ImportFrom":" from .status_codes import codes@175,0>" -> "<Keyword":" import>"
	<Name: codes@175,26> [label=Name]
	"<ImportFrom":" from .status_codes import codes@175,0>" -> "<Name":" codes@175,26>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [<ImportFrom":" from .status_codes import codes@175,0>, <Newline": '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: logging@177,0>, PythonNode(trailer, [<Operator: .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])]), <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" logging@177,0>, PythonNode(trailer, [<Operator": .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])]), <Newline: '\n'>])
	"PythonNode(atom_expr, [<Name: logging@177,0>, PythonNode(trailer, [<Operator: .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])])" [label=PythonNode]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" logging@177,0>, PythonNode(trailer, [<Operator": .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])]), <Newline: '\n'>]) -> "PythonNode(atom_expr, [<Name":" logging@177,0>, PythonNode(trailer, [<Operator": .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])])
	<Name: logging@177,0> [label=Name]
	"PythonNode(atom_expr, [<Name":" logging@177,0>, PythonNode(trailer, [<Operator": .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])]) -> "<Name":" logging@177,0>"
	"PythonNode(trailer, [<Operator: .>, <Name: getLogger@177,8>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" logging@177,0>, PythonNode(trailer, [<Operator": .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": getLogger@177,8>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": getLogger@177,8>]) -> "<Operator":" .>"
	<Name: getLogger@177,8> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": getLogger@177,8>]) -> "<Name":" getLogger@177,8>"
	"PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" logging@177,0>, PythonNode(trailer, [<Operator": .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Name": __name__@177,18>, <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": __name__@177,18>, <Operator: )>]) -> "<Operator":" (>"
	<Name: __name__@177,18> [label=Name]
	"PythonNode(trailer, [<Operator":" (>, <Name": __name__@177,18>, <Operator: )>]) -> "<Name":" __name__@177,18>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Name": __name__@177,18>, <Operator: )>]) -> "<Operator":" )>"
	"PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" logging@177,0>, PythonNode(trailer, [<Operator": .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": addHandler@177,28>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": addHandler@177,28>]) -> "<Operator":" .>"
	<Name: addHandler@177,28> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": addHandler@177,28>]) -> "<Name":" addHandler@177,28>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" logging@177,0>, PythonNode(trailer, [<Operator": .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(atom_expr, [<Name": NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(atom_expr, [<Name": NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(atom_expr, [<Name": NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>]) -> "PythonNode(atom_expr, [<Name":" NullHandler@177,39>, PythonNode(trailer, [<Operator": (>, <Operator: )>])])
	<Name: NullHandler@177,39> [label=Name]
	"PythonNode(atom_expr, [<Name":" NullHandler@177,39>, PythonNode(trailer, [<Operator": (>, <Operator: )>])]) -> "<Name":" NullHandler@177,39>"
	"PythonNode(trailer, [<Operator: (>, <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" NullHandler@177,39>, PythonNode(trailer, [<Operator": (>, <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, <Operator": )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Operator": )>]) -> "<Operator":" (>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, <Operator": )>]) -> "<Operator":" )>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(atom_expr, [<Name": NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" logging@177,0>, PythonNode(trailer, [<Operator": .>, <Name: getLogger@177,8>]), PythonNode(trailer, [<Operator: (>, <Name: __name__@177,18>, <Operator: )>]), PythonNode(trailer, [<Operator: .>, <Name: addHandler@177,28>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom_expr, [<Name: NullHandler@177,39>, PythonNode(trailer, [<Operator: (>, <Operator: )>])]), <Operator: )>])]), <Newline: '\n'>]) -> "<Newline":" '\n'>"
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name: warnings@180,0>, PythonNode(trailer, [<Operator: .>, <Name: simplefilter@180,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: \"default\">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])]), <Newline: '\n'>])" [label=PythonNode]
	"<Module":" @6-181>" -> "PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@180,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@180,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])]), <Newline: '\n'>])
	"PythonNode(atom_expr, [<Name: warnings@180,0>, PythonNode(trailer, [<Operator: .>, <Name: simplefilter@180,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: \"default\">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])])" [label=PythonNode]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@180,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@180,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])]), <Newline: '\n'>]) -> "PythonNode(atom_expr, [<Name":" warnings@180,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@180,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])])
	<Name: warnings@180,0> [label=Name]
	"PythonNode(atom_expr, [<Name":" warnings@180,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@180,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])]) -> "<Name":" warnings@180,0>"
	"PythonNode(trailer, [<Operator: .>, <Name: simplefilter@180,9>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" warnings@180,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@180,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" .>, <Name": simplefilter@180,9>])
	<Operator: .> [label=Operator]
	"PythonNode(trailer, [<Operator":" .>, <Name": simplefilter@180,9>]) -> "<Operator":" .>"
	<Name: simplefilter@180,9> [label=Name]
	"PythonNode(trailer, [<Operator":" .>, <Name": simplefilter@180,9>]) -> "<Name":" simplefilter@180,9>"
	"PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: \"default\">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])" [label=PythonNode]
	"PythonNode(atom_expr, [<Name":" warnings@180,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@180,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])]) -> "PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<String": "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])
	<Operator: (> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<String": "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>]) -> "<Operator":" (>"
	"PythonNode(arglist, [<String: \"default\">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])])" [label=PythonNode]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<String": "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>]) -> "PythonNode(arglist, [<String":" \"default\">, <Operator": ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])])
	<String: "default"> [label=String]
	"PythonNode(arglist, [<String":" \"default\">, <Operator": ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]) -> "<String":" \"default\">"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [<String":" \"default\">, <Operator": ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]) -> "<Operator":" ,>"
	<Name: FileModeWarning@180,33> [label=Name]
	"PythonNode(arglist, [<String":" \"default\">, <Operator": ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]) -> "<Name":" FileModeWarning@180,33>"
	<Operator: ,> [label=Operator]
	"PythonNode(arglist, [<String":" \"default\">, <Operator": ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]) -> "<Operator":" ,>"
	"PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])" [label=PythonNode]
	"PythonNode(arglist, [<String":" \"default\">, <Operator": ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]) -> "PythonNode(argument, [<Name":" append@180,50>, <Operator": =>, <Keyword: True>])
	<Name: append@180,50> [label=Name]
	"PythonNode(argument, [<Name":" append@180,50>, <Operator": =>, <Keyword: True>]) -> "<Name":" append@180,50>"
	<Operator: => [label=Operator]
	"PythonNode(argument, [<Name":" append@180,50>, <Operator": =>, <Keyword: True>]) -> "<Operator":" =>"
	<Keyword: True> [label=Keyword]
	"PythonNode(argument, [<Name":" append@180,50>, <Operator": =>, <Keyword: True>]) -> "<Keyword":" True>"
	<Operator: )> [label=Operator]
	"PythonNode(trailer, [<Operator":" (>, PythonNode(arglist, [<String": "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>]) -> "<Operator":" )>"
	<Newline: '\n'> [label=Newline]
	"PythonNode(simple_stmt, [PythonNode(atom_expr, [<Name":" warnings@180,0>, PythonNode(trailer, [<Operator": .>, <Name: simplefilter@180,9>]), PythonNode(trailer, [<Operator: (>, PythonNode(arglist, [<String: "default">, <Operator: ,>, <Name: FileModeWarning@180,33>, <Operator: ,>, PythonNode(argument, [<Name: append@180,50>, <Operator: =>, <Keyword: True>])]), <Operator: )>])]), <Newline: '\n'>]) -> "<Newline":" '\n'>"
	<EndMarker: prefix='' end_pos=(181, 0)> [label=EndMarker]
	"<Module":" @6-181>" -> "<EndMarker":" prefix='' end_pos=(181, 0)>"
}
